{
  "api/Unosquare.RaspberryIO.html": {
    "href": "api/Unosquare.RaspberryIO.html",
    "title": "Namespace Unosquare.RaspberryIO | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Namespace Unosquare.RaspberryIO Classes Pi Our main character. Provides access to the Raspberry Pi's GPIO, system and board information and Camera Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Pi.html": {
    "href": "api/Unosquare.RaspberryIO.Pi.html",
    "title": "Class Pi | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Class Pi Our main character. Provides access to the Raspberry Pi's GPIO, system and board information and Camera Inheritance Object Pi Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.RaspberryIO Syntax public static class Pi Properties Camera Provides access to the official Raspberry Pi Camera Declaration public static CameraController Camera { get; } Property Value Type Description CameraController Gpio Provides access to the Raspberry Pi's GPIO as a collection of GPIO Pins. Declaration public static GpioController Gpio { get; } Property Value Type Description GpioController I2C Provides access to the functionality of the i2c bus. Declaration public static I2CBus I2C { get; } Property Value Type Description I2CBus Info Provides information on this Raspberry Pi's CPU and form factor. Declaration public static SystemInfo Info { get; } Property Value Type Description SystemInfo PiDisplay Provides access to the official Raspberry Pi 7-inch DSI Display Declaration public static DsiDisplay PiDisplay { get; } Property Value Type Description DsiDisplay Spi Provides access to the 2-channel SPI bus Declaration public static SpiBus Spi { get; } Property Value Type Description SpiBus Timing Provides access to The PI's Timing and threading API Declaration public static Timing Timing { get; } Property Value Type Description Timing Methods Restart() Restarts the Pi. Must be running as SU Declaration public static ProcessResult Restart() Returns Type Description ProcessResult The process result RestartAsync() Restarts the Pi. Must be running as SU Declaration public static Task<ProcessResult> RestartAsync() Returns Type Description Task < ProcessResult > The process result Shutdown() Halts the Pi. Must be running as SU Declaration public static ProcessResult Shutdown() Returns Type Description ProcessResult The process result ShutdownAsync() Halts the Pi. Must be running as SU Declaration public static Task<ProcessResult> ShutdownAsync() Returns Type Description Task < ProcessResult > The process result Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Native.ThreadLockKey.html": {
    "href": "api/Unosquare.RaspberryIO.Native.ThreadLockKey.html",
    "title": "Enum ThreadLockKey | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Enum ThreadLockKey Defines the different threading locking keys Namespace : Unosquare.RaspberryIO.Native Syntax public enum ThreadLockKey Fields Name Description Lock0 The lock 0 Lock1 The lock 1 Lock2 The lock 2 Lock3 The lock 3 Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Native.InterruptServiceRoutineCallback.html": {
    "href": "api/Unosquare.RaspberryIO.Native.InterruptServiceRoutineCallback.html",
    "title": "Delegate InterruptServiceRoutineCallback | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Delegate InterruptServiceRoutineCallback A delegate defining a callback for an Interrupt Service Routine Namespace : Unosquare.RaspberryIO.Native Syntax public delegate void InterruptServiceRoutineCallback(); Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Gpio.html": {
    "href": "api/Unosquare.RaspberryIO.Gpio.html",
    "title": "Namespace Unosquare.RaspberryIO.Gpio | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Namespace Unosquare.RaspberryIO.Gpio Classes GpioController Represents a singleton of the Raspberry Pi GPIO controller as an IReadOnlyCollection of GpioPins Low level operations are accomplished by using the Wiring Pi library. Use the Instance property to access the singleton's instance GpioPin Represents a GPIO Pin, its location and its capabilities. Full pin reference available here: http://pinout.xyz/pinout/pin31_gpio6 and http://wiringpi.com/pins/ I2CBus A simple wrapper for the I2c bus on the Raspberry Pi I2CDevice Represents a device on the I2C Bus SpiBus The SPI Bus containing the 2 SPI channels SpiChannel Provides access to using the SPI buses on the GPIO. SPI is a bus that works like a ring shift register The number of bytes pushed is equal to the number of bytes received. Enums EdgeDetection Defines the different edge detection modes for pin interrupts GpioHeader Defines the Header connectors available GpioPinDriveMode Defines the different drive modes of a GPIO pin GpioPinResistorPullMode The GPIO pin resistor mode. This is used on input pins so that their lines are not floating GpioPinValue Defines the GPIO Pin values 0 for low, 1 for High P1 Enumerates the different pins on the P1 Header as commonly referenced by Raspberry Pi Documentation. Enumeration values correspond to the physical pin number. P5 Enumerates the different pins on the P5 Header as commonly referenced by Raspberry Pi documentation. Enumeration values correspond to the physical pin number. PinCapability Defines the different pin capabilities PwmMode The PWM mode. WiringPiPin Defines all the available Wiring Pi Pin Numbers Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Gpio.WiringPiPin.html": {
    "href": "api/Unosquare.RaspberryIO.Gpio.WiringPiPin.html",
    "title": "Enum WiringPiPin | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Enum WiringPiPin Defines all the available Wiring Pi Pin Numbers Namespace : Unosquare.RaspberryIO.Gpio Syntax public enum WiringPiPin Fields Name Description Pin00 The pin00 Pin01 The pin01 Pin02 The pin02 Pin03 The pin03 Pin04 The pin04 Pin05 The pin05 Pin06 The pin06 Pin07 The pin07 Pin08 The pin08 Pin09 The pin09 Pin10 The pin10 Pin11 The pin11 Pin12 The pin12 Pin13 The pin13 Pin14 The pin14 Pin15 The pin15 Pin16 The pin16 Pin17 The pin17 Pin18 The pin18 Pin19 The pin19 Pin20 The pin20 Pin21 The pin21 Pin22 The pin22 Pin23 The pin23 Pin24 The pin24 Pin25 The pin25 Pin26 The pin26 Pin27 The pin27 Pin28 The pin28 Pin29 The pin29 Pin30 The pin30 Pin31 The pin31 Unknown The unknown Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Gpio.PwmMode.html": {
    "href": "api/Unosquare.RaspberryIO.Gpio.PwmMode.html",
    "title": "Enum PwmMode | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Enum PwmMode The PWM mode. Namespace : Unosquare.RaspberryIO.Gpio Syntax public enum PwmMode Fields Name Description Balanced PWM pulses are sent as a balanced signal (default, newer mode) MarkSign PWM pulses are sent using mark-sign patterns (old school) Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Gpio.PinCapability.html": {
    "href": "api/Unosquare.RaspberryIO.Gpio.PinCapability.html",
    "title": "Enum PinCapability | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Enum PinCapability Defines the different pin capabilities Namespace : Unosquare.RaspberryIO.Gpio Syntax public enum PinCapability Fields Name Description GP General Purpose capability: Digital and Analog Read/Write GPCLK General Purpose Clock (not PWM) I2CSCL i2c clock channel I2CSDA i2c data channel PWM Hardware Pule Width Modulation SPICLK SPI Clock channel SPICS SPI Chip Select Channel SPIMISO SPI Master In, Slave Out channel SPIMOSI SPI Master Out, Slave In channel UARTRTS UART Request to Send Channel UARTRXD UART Receive Channel UARTTXD UART Transmit Channel Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Gpio.I2CDevice.html": {
    "href": "api/Unosquare.RaspberryIO.Gpio.I2CDevice.html",
    "title": "Class I2CDevice | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Class I2CDevice Represents a device on the I2C Bus Inheritance Object I2CDevice Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.RaspberryIO.Gpio Syntax public class I2CDevice Properties DeviceId Gets the device identifier. Declaration public int DeviceId { get; } Property Value Type Description Int32 The device identifier. FileDescriptor Gets the standard POSIX file descriptor. Declaration public int FileDescriptor { get; } Property Value Type Description Int32 The file descriptor. Methods Read() Reads a byte from the specified file descriptor Declaration public byte Read() Returns Type Description Byte The byte from device Read(Int32) Reads a buffer of the specified length, one byte at a time Declaration public byte[] Read(int length) Parameters Type Name Description Int32 length The length. Returns Type Description Byte [] The byte array from device ReadAddressByte(Int32) These read an 8 or 16-bit value from the device register indicated. Declaration public byte ReadAddressByte(int address) Parameters Type Name Description Int32 address The register. Returns Type Description Byte The address byte from device ReadAddressWord(Int32) These read an 8 or 16-bit value from the device register indicated. Declaration public ushort ReadAddressWord(int address) Parameters Type Name Description Int32 address The register. Returns Type Description UInt16 The address word from device ReadAsync() Reads a byte from the specified file descriptor Declaration public Task<byte> ReadAsync() Returns Type Description Task < Byte > The byte from device ReadAsync(Int32) Reads a buffer of the specified length, one byte at a time Declaration public Task<byte[]> ReadAsync(int length) Parameters Type Name Description Int32 length The length. Returns Type Description Task < Byte []> The byte array from device Write(Byte) Writes a byte of data the specified file descriptor. Declaration public void Write(byte data) Parameters Type Name Description Byte data The data. Write(Byte[]) Writes a set of bytes to the specified file descriptor. Declaration public void Write(byte[] data) Parameters Type Name Description Byte [] data The data. WriteAddressByte(Int32, Byte) These write an 8 or 16-bit data value into the device register indicated. Declaration public void WriteAddressByte(int address, byte data) Parameters Type Name Description Int32 address The register. Byte data The data. WriteAddressWord(Int32, UInt16) These write an 8 or 16-bit data value into the device register indicated. Declaration public void WriteAddressWord(int address, ushort data) Parameters Type Name Description Int32 address The register. UInt16 data The data. WriteAsync(Byte) Writes a byte of data the specified file descriptor. Declaration public Task WriteAsync(byte data) Parameters Type Name Description Byte data The data. Returns Type Description Task The awaitable task WriteAsync(Byte[]) Writes a set of bytes to the specified file descriptor. Declaration public Task WriteAsync(byte[] data) Parameters Type Name Description Byte [] data The data. Returns Type Description Task The awaitable task Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Gpio.I2CBus.html": {
    "href": "api/Unosquare.RaspberryIO.Gpio.I2CBus.html",
    "title": "Class I2CBus | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Class I2CBus A simple wrapper for the I2c bus on the Raspberry Pi Inheritance Object I2CBus Namespace : Unosquare.RaspberryIO.Gpio Syntax public class I2CBus : SingletonBase<I2CBus> Properties Devices Gets the registered devices as a read only collection. Declaration public ReadOnlyCollection<I2CDevice> Devices { get; } Property Value Type Description ReadOnlyCollection < I2CDevice > Item[Int32] Gets the I2CDevice with the specified device identifier. Declaration public I2CDevice this[int deviceId] { get; } Parameters Type Name Description Int32 deviceId The device identifier. Property Value Type Description I2CDevice The I2CDevice . Methods AddDevice(Int32) Adds a device to the bus by its Id. If the device is already registered it simply returns the existing device. Declaration public I2CDevice AddDevice(int deviceId) Parameters Type Name Description Int32 deviceId The device identifier. Returns Type Description I2CDevice The device reference Exceptions Type Condition KeyNotFoundException When the device file descriptor is not found GetDeviceById(Int32) Gets the device by identifier. Declaration public I2CDevice GetDeviceById(int deviceId) Parameters Type Name Description Int32 deviceId The device identifier. Returns Type Description I2CDevice The device reference Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Gpio.GpioHeader.html": {
    "href": "api/Unosquare.RaspberryIO.Gpio.GpioHeader.html",
    "title": "Enum GpioHeader | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Enum GpioHeader Defines the Header connectors available Namespace : Unosquare.RaspberryIO.Gpio Syntax public enum GpioHeader Fields Name Description None Not defined P1 The P1 connector (main connector) P5 The P5 connector (auxiliary, not commonly used) Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Gpio.GpioController.html": {
    "href": "api/Unosquare.RaspberryIO.Gpio.GpioController.html",
    "title": "Class GpioController | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Class GpioController Represents a singleton of the Raspberry Pi GPIO controller as an IReadOnlyCollection of GpioPins Low level operations are accomplished by using the Wiring Pi library. Use the Instance property to access the singleton's instance Inheritance Object GpioController Implements IReadOnlyCollection < GpioPin > IEnumerable < GpioPin > IEnumerable Namespace : Unosquare.RaspberryIO.Gpio Syntax public sealed class GpioController : SingletonBase<GpioController>, IReadOnlyCollection<GpioPin>, IEnumerable<GpioPin>, IEnumerable Properties Count Gets the number of registered pins in the controller. Declaration public int Count { get; } Property Value Type Description Int32 HeaderP1 Provides all the pins on Header P1 of the Pi as a lookup by physical header pin number. This header is the main header and it is the one commonly used. Declaration public ReadOnlyDictionary<int, GpioPin> HeaderP1 { get; } Property Value Type Description ReadOnlyDictionary < Int32 , GpioPin > HeaderP5 Provides all the pins on Header P5 of the Pi as a lookup by physical header pin number. This header is the secondary header and it is rarely used. Declaration public ReadOnlyDictionary<int, GpioPin> HeaderP5 { get; } Property Value Type Description ReadOnlyDictionary < Int32 , GpioPin > IsInitialized Determines if the underlying GPIO controller has been initialized properly. Declaration public static bool IsInitialized { get; } Property Value Type Description Boolean true if the controller is properly initialized; otherwise, false . Item[Int32] Gets the GpioPin with the specified Wiring Pi pin number. Use the HeaderP1 and HeaderP5 lookups if you would like to retrieve pins by physical pin number. Declaration public GpioPin this[int wiringPiPinNumber] { get; } Parameters Type Name Description Int32 wiringPiPinNumber The pin number as defined by Wiring Pi. This is not the header pin number as pin number in headers are obvoisly repeating. Property Value Type Description GpioPin The GpioPin . Exceptions Type Condition IndexOutOfRangeException When the pin index is not found Item[P1] Gets the GpioPin with the specified pin number. Declaration public GpioPin this[P1 pinNumber] { get; } Parameters Type Name Description P1 pinNumber The pin number. Property Value Type Description GpioPin The GpioPin . Item[P5] Gets the GpioPin with the specified pin number. Declaration public GpioPin this[P5 pinNumber] { get; } Parameters Type Name Description P5 pinNumber The pin number. Property Value Type Description GpioPin The GpioPin . Item[WiringPiPin] Gets the GpioPin with the specified Wiring Pi pin number. Declaration public GpioPin this[WiringPiPin pinNumber] { get; } Parameters Type Name Description WiringPiPin pinNumber The pin number. Property Value Type Description GpioPin The GpioPin . Pin00 Provides direct access to Pin known to Wiring Pi (not the pin header number) as Pin 00. Declaration public GpioPin Pin00 { get; } Property Value Type Description GpioPin Pin01 Provides direct access to Pin known to Wiring Pi (not the pin header number) as Pin 01. Declaration public GpioPin Pin01 { get; } Property Value Type Description GpioPin Pin02 Provides direct access to Pin known to Wiring Pi (not the pin header number) as Pin 02. Declaration public GpioPin Pin02 { get; } Property Value Type Description GpioPin Pin03 Provides direct access to Pin known to Wiring Pi (not the pin header number) as Pin 03. Declaration public GpioPin Pin03 { get; } Property Value Type Description GpioPin Pin04 Provides direct access to Pin known to Wiring Pi (not the pin header number) as Pin 04. Declaration public GpioPin Pin04 { get; } Property Value Type Description GpioPin Pin05 Provides direct access to Pin known to Wiring Pi (not the pin header number) as Pin 05. Declaration public GpioPin Pin05 { get; } Property Value Type Description GpioPin Pin06 Provides direct access to Pin known to Wiring Pi (not the pin header number) as Pin 06. Declaration public GpioPin Pin06 { get; } Property Value Type Description GpioPin Pin07 Provides direct access to Pin known to Wiring Pi (not the pin header number) as Pin 07. Declaration public GpioPin Pin07 { get; } Property Value Type Description GpioPin Pin08 Provides direct access to Pin known to Wiring Pi (not the pin header number) as Pin 08. Declaration public GpioPin Pin08 { get; } Property Value Type Description GpioPin Pin09 Provides direct access to Pin known to Wiring Pi (not the pin header number) as Pin 09. Declaration public GpioPin Pin09 { get; } Property Value Type Description GpioPin Pin10 Provides direct access to Pin known to Wiring Pi (not the pin header number) as Pin 10. Declaration public GpioPin Pin10 { get; } Property Value Type Description GpioPin Pin11 Provides direct access to Pin known to Wiring Pi (not the pin header number) as Pin 11. Declaration public GpioPin Pin11 { get; } Property Value Type Description GpioPin Pin12 Provides direct access to Pin known to Wiring Pi (not the pin header number) as Pin 12. Declaration public GpioPin Pin12 { get; } Property Value Type Description GpioPin Pin13 Provides direct access to Pin known to Wiring Pi (not the pin header number) as Pin 13. Declaration public GpioPin Pin13 { get; } Property Value Type Description GpioPin Pin14 Provides direct access to Pin known to Wiring Pi (not the pin header number) as Pin 14. Declaration public GpioPin Pin14 { get; } Property Value Type Description GpioPin Pin15 Provides direct access to Pin known to Wiring Pi (not the pin header number) as Pin 15. Declaration public GpioPin Pin15 { get; } Property Value Type Description GpioPin Pin16 Provides direct access to Pin known to Wiring Pi (not the pin header number) as Pin 16. Declaration public GpioPin Pin16 { get; } Property Value Type Description GpioPin Pin17 Provides direct access to Pin known to Wiring Pi (not the pin header number) as Pin 17. Declaration public GpioPin Pin17 { get; } Property Value Type Description GpioPin Pin18 Provides direct access to Pin known to Wiring Pi (not the pin header number) as Pin 18. Declaration public GpioPin Pin18 { get; } Property Value Type Description GpioPin Pin19 Provides direct access to Pin known to Wiring Pi (not the pin header number) as Pin 19. Declaration public GpioPin Pin19 { get; } Property Value Type Description GpioPin Pin20 Provides direct access to Pin known to Wiring Pi (not the pin header number) as Pin 20. Declaration public GpioPin Pin20 { get; } Property Value Type Description GpioPin Pin21 Provides direct access to Pin known to Wiring Pi (not the pin header number) as Pin 21. Declaration public GpioPin Pin21 { get; } Property Value Type Description GpioPin Pin22 Provides direct access to Pin known to Wiring Pi (not the pin header number) as Pin 22. Declaration public GpioPin Pin22 { get; } Property Value Type Description GpioPin Pin23 Provides direct access to Pin known to Wiring Pi (not the pin header number) as Pin 23. Declaration public GpioPin Pin23 { get; } Property Value Type Description GpioPin Pin24 Provides direct access to Pin known to Wiring Pi (not the pin header number) as Pin 24. Declaration public GpioPin Pin24 { get; } Property Value Type Description GpioPin Pin25 Provides direct access to Pin known to Wiring Pi (not the pin header number) as Pin 25. Declaration public GpioPin Pin25 { get; } Property Value Type Description GpioPin Pin26 Provides direct access to Pin known to Wiring Pi (not the pin header number) as Pin 26. Declaration public GpioPin Pin26 { get; } Property Value Type Description GpioPin Pin27 Provides direct access to Pin known to Wiring Pi (not the pin header number) as Pin 27. Declaration public GpioPin Pin27 { get; } Property Value Type Description GpioPin Pin28 Provides direct access to Pin known to Wiring Pi (not the pin header number) as Pin 28. Declaration public GpioPin Pin28 { get; } Property Value Type Description GpioPin Pin29 Provides direct access to Pin known to Wiring Pi (not the pin header number) as Pin 29. Declaration public GpioPin Pin29 { get; } Property Value Type Description GpioPin Pin30 Provides direct access to Pin known to Wiring Pi (not the pin header number) as Pin 30. Declaration public GpioPin Pin30 { get; } Property Value Type Description GpioPin Pin31 Provides direct access to Pin known to Wiring Pi (not the pin header number) as Pin 31. Declaration public GpioPin Pin31 { get; } Property Value Type Description GpioPin Pins Gets a red-only collection of all registered pins. Declaration public ReadOnlyCollection<GpioPin> Pins { get; } Property Value Type Description ReadOnlyCollection < GpioPin > PwmBaseFrequency Gets the PWM base frequency (in Hz). Declaration public int PwmBaseFrequency { get; } Property Value Type Description Int32 Methods GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<GpioPin> GetEnumerator() Returns Type Description IEnumerator < GpioPin > A IEnumerator<T> that can be used to iterate through the collection. GetGpioPinByBcmPinNumber(Int32) Gets the GPIO pin by BCM pin number. Declaration public GpioPin GetGpioPinByBcmPinNumber(int bcmPinNumber) Parameters Type Name Description Int32 bcmPinNumber The BCM pin number. Returns Type Description GpioPin The GPIO pin ReadByte() This reads the 8-bit byte supplied to the first 8 GPIO pins. It’s the fastest way to get all 8 bits at once to a particular value. Please note this function is undocumented and unsopported Declaration public byte ReadByte() Returns Type Description Byte A byte from the GPIO Exceptions Type Condition InvalidOperationException PinMode ReadByteAsync() This reads the 8-bit byte supplied to the first 8 GPIO pins. It’s the fastest way to get all 8 bits at once to a particular value. Please note this function is undocumented and unsopported Declaration public Task<byte> ReadByteAsync() Returns Type Description Task < Byte > A byte from the GPIO SetPadDrive(Int32, Int32) This sets the “strength” of the pad drivers for a particular group of pins. There are 3 groups of pins and the drive strength is from 0 to 7. Do not use this unless you know what you are doing. Declaration public void SetPadDrive(int group, int value) Parameters Type Name Description Int32 group The group. Int32 value The value. SetPadDriveAsync(Int32, Int32) This sets the “strength” of the pad drivers for a particular group of pins. There are 3 groups of pins and the drive strength is from 0 to 7. Do not use this unless you know what you are doing. Declaration public Task SetPadDriveAsync(int group, int value) Parameters Type Name Description Int32 group The group. Int32 value The value. Returns Type Description Task The awaitable task WriteByte(Byte) This writes the 8-bit byte supplied to the first 8 GPIO pins. It’s the fastest way to set all 8 bits at once to a particular value, although it still takes two write operations to the Pi’s GPIO hardware. Declaration public void WriteByte(byte value) Parameters Type Name Description Byte value The value. Exceptions Type Condition InvalidOperationException PinMode WriteByteAsync(Byte) This writes the 8-bit byte supplied to the first 8 GPIO pins. It’s the fastest way to set all 8 bits at once to a particular value, although it still takes two write operations to the Pi’s GPIO hardware. Declaration public Task WriteByteAsync(byte value) Parameters Type Name Description Byte value The value. Returns Type Description Task The awaitable task Explicit Interface Implementations IEnumerable.GetEnumerator() Returns an enumerator that iterates through the collection. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator An IEnumerator object that can be used to iterate through the collection. Implements System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Computer.WirelessNetworkInfo.html": {
    "href": "api/Unosquare.RaspberryIO.Computer.WirelessNetworkInfo.html",
    "title": "Class WirelessNetworkInfo | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Class WirelessNetworkInfo Represents a wireless network information Inheritance Object WirelessNetworkInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.RaspberryIO.Computer Syntax public class WirelessNetworkInfo Properties IsEncrypted Gets a value indicating whether this instance is encrypted. Declaration public bool IsEncrypted { get; } Property Value Type Description Boolean Name Gets the ESSID of the Wireless network. Declaration public string Name { get; } Property Value Type Description String Quality Gets the network quality. Declaration public string Quality { get; } Property Value Type Description String Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Computer.SystemInfo.html": {
    "href": "api/Unosquare.RaspberryIO.Computer.SystemInfo.html",
    "title": "Class SystemInfo | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Class SystemInfo http://raspberry-pi-guide.readthedocs.io/en/latest/system.html Inheritance Object SystemInfo Namespace : Unosquare.RaspberryIO.Computer Syntax public sealed class SystemInfo : SingletonBase<SystemInfo> Properties CpuArchitecture Gets the CPU architecture code. Declaration public string CpuArchitecture { get; } Property Value Type Description String CpuImplementer Gets the CPU implementer hex code. Declaration public string CpuImplementer { get; } Property Value Type Description String CpuPart Gets the CPU part code. Declaration public string CpuPart { get; } Property Value Type Description String CpuRevision Gets the CPU revision code. Declaration public string CpuRevision { get; } Property Value Type Description String CpuVariant Gets the CPU variant code. Declaration public string CpuVariant { get; } Property Value Type Description String Features Gets a list of supported CPU features. Declaration public string[] Features { get; } Property Value Type Description String [] Hardware Gets the hardware model number. Declaration public string Hardware { get; } Property Value Type Description String InstalledRam Gets the installed ram in bytes. Declaration public int InstalledRam { get; } Property Value Type Description Int32 IsLittleEndian Gets a value indicating whether this CPU is little endian. Declaration public bool IsLittleEndian { get; } Property Value Type Description Boolean ModelName Gets the CPU model name. Declaration public string ModelName { get; } Property Value Type Description String OperatingSystem Gets the OS information. Declaration public OsInfo OperatingSystem { get; } Property Value Type Description OsInfo The os information. ProcessorCount Gets the number of processor cores. Declaration public int ProcessorCount { get; } Property Value Type Description Int32 RaspberryPiVersion Gets the Raspberry Pi version. Declaration public PiVersion RaspberryPiVersion { get; } Property Value Type Description PiVersion Revision Gets the hardware revision number. Declaration public string Revision { get; } Property Value Type Description String Serial Gets the serial number. Declaration public string Serial { get; } Property Value Type Description String Uptime Gets the system uptime (in seconds). Declaration public double Uptime { get; } Property Value Type Description Double UptimeTimeSpan Gets the uptime in TimeSpan. Declaration public TimeSpan UptimeTimeSpan { get; } Property Value Type Description TimeSpan WiringPiBoardRevision Gets the Wiring Pi board revision (1 or 2). Declaration public int WiringPiBoardRevision { get; } Property Value Type Description Int32 The wiring pi board revision. WiringPiVersion Gets the wiring pi library version. Declaration public Version WiringPiVersion { get; } Property Value Type Description Version Methods ToString() Returns a String that represents this instance. Declaration public override string ToString() Returns Type Description String A String that represents this instance. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Computer.NetworkSettings.html": {
    "href": "api/Unosquare.RaspberryIO.Computer.NetworkSettings.html",
    "title": "Class NetworkSettings | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Class NetworkSettings Represents the network information Inheritance Object NetworkSettings Namespace : Unosquare.RaspberryIO.Computer Syntax public class NetworkSettings : SingletonBase<NetworkSettings> Properties HostName Gets the local machine Host Name. Declaration public string HostName { get; } Property Value Type Description String Methods GetWirelessNetworkName() Retrieves current wireless connected network name. Declaration public string GetWirelessNetworkName() Returns Type Description String The connected network name. RetrieveAdapters() Retrieves the network adapters. Declaration public List<NetworkAdapterInfo> RetrieveAdapters() Returns Type Description List < NetworkAdapterInfo > A list of network adapters. RetrieveWirelessNetworks(String) Retrieves the wireless networks. Declaration public List<WirelessNetworkInfo> RetrieveWirelessNetworks(string adapter) Parameters Type Name Description String adapter The adapter. Returns Type Description List < WirelessNetworkInfo > A list of WiFi networks RetrieveWirelessNetworks(String[]) Retrieves the wireless networks. Declaration public List<WirelessNetworkInfo> RetrieveWirelessNetworks(string[] adapters = null) Parameters Type Name Description String [] adapters The adapters. Returns Type Description List < WirelessNetworkInfo > A list of WiFi networks SetupWirelessNetwork(String, String, String, String) Setups the wireless network. Declaration public bool SetupWirelessNetwork(string adapterName, string networkSsid, string password = null, string countryCode = \"US\") Parameters Type Name Description String adapterName Name of the adapter. String networkSsid The network ssid. String password The password. String countryCode The 2-letter country code in uppercase. Default is US. Returns Type Description Boolean True if successful. Otherwise, false. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Computer.NetworkAdapterInfo.html": {
    "href": "api/Unosquare.RaspberryIO.Computer.NetworkAdapterInfo.html",
    "title": "Class NetworkAdapterInfo | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Class NetworkAdapterInfo Represents a Network Adapter Inheritance Object NetworkAdapterInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.RaspberryIO.Computer Syntax public class NetworkAdapterInfo Properties AccessPointName Gets the name of the access point. Declaration public string AccessPointName { get; } Property Value Type Description String IPv4 Gets the IP V4 address. Declaration public IPAddress IPv4 { get; } Property Value Type Description IPAddress IPv6 Gets the IP V6 address. Declaration public IPAddress IPv6 { get; } Property Value Type Description IPAddress IsWireless Gets a value indicating whether this instance is wireless. Declaration public bool IsWireless { get; } Property Value Type Description Boolean MacAddress Gets the MAC (Physical) address. Declaration public string MacAddress { get; } Property Value Type Description String Name Gets the name. Declaration public string Name { get; } Property Value Type Description String Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Camera.CameraWhiteBalanceMode.html": {
    "href": "api/Unosquare.RaspberryIO.Camera.CameraWhiteBalanceMode.html",
    "title": "Enum CameraWhiteBalanceMode | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Enum CameraWhiteBalanceMode Defines the different AWB (Auto White Balance) modes for the Raspberry Pi's camera module Namespace : Unosquare.RaspberryIO.Camera Syntax public enum CameraWhiteBalanceMode Fields Name Description Auto The automatic Cloud The cloud Flash The flash Fluorescent The fluorescent Horizon The horizon Incandescent The incandescent Off No white balance Shade The shade Sun The sun Tungsten The tungsten Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Camera.CameraStillSettings.html": {
    "href": "api/Unosquare.RaspberryIO.Camera.CameraStillSettings.html",
    "title": "Class CameraStillSettings | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Class CameraStillSettings Defines a wrapper for the raspistill program and its settings (command-line arguments) Inheritance Object CameraSettingsBase CameraStillSettings Inherited Members CameraSettingsBase.Ci CameraSettingsBase.CaptureTimeoutMilliseconds CameraSettingsBase.CaptureDisplayPreview CameraSettingsBase.CaptureDisplayPreviewInFullScreen CameraSettingsBase.CaptureVideoStabilizationEnabled CameraSettingsBase.CaptureDisplayPreviewOpacity CameraSettingsBase.CaptureSensorRoi CameraSettingsBase.CaptureShutterSpeedMicroseconds CameraSettingsBase.CaptureExposure CameraSettingsBase.CaptureExposureCompensation CameraSettingsBase.CaptureMeteringMode CameraSettingsBase.CaptureWhiteBalanceControl CameraSettingsBase.CaptureWhiteBalanceGainBlue CameraSettingsBase.CaptureWhiteBalanceGainRed CameraSettingsBase.CaptureDynamicRangeCompensation CameraSettingsBase.CaptureWidth CameraSettingsBase.CaptureHeight CameraSettingsBase.ImageSharpness CameraSettingsBase.ImageContrast CameraSettingsBase.ImageBrightness CameraSettingsBase.ImageSaturation CameraSettingsBase.ImageIso CameraSettingsBase.ImageEffect CameraSettingsBase.ImageColorEffectU CameraSettingsBase.ImageColorEffectV CameraSettingsBase.ImageRotation CameraSettingsBase.ImageFlipHorizontally CameraSettingsBase.ImageFlipVertically CameraSettingsBase.ImageAnnotations CameraSettingsBase.ImageAnnotationsText CameraSettingsBase.ImageAnnotationFontSize CameraSettingsBase.ImageAnnotationFontColor CameraSettingsBase.ImageAnnotationBackground Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.RaspberryIO.Camera Syntax public class CameraStillSettings : CameraSettingsBase Properties CaptureDisplayPreviewAtResolution Gets or sets a value indicating whether the preview window (if enabled) uses native capture resolution This may slow down preview FPS Declaration public bool CaptureDisplayPreviewAtResolution { get; set; } Property Value Type Description Boolean CaptureEncoding Gets or sets the encoding format the hardware will use for the output. Declaration public CameraImageEncodingFormat CaptureEncoding { get; set; } Property Value Type Description CameraImageEncodingFormat CaptureJpegExtendedInfo JPEG EXIF data Keys and values must be already properly escaped. Otherwise the command will fail. Declaration public Dictionary<string, string> CaptureJpegExtendedInfo { get; } Property Value Type Description Dictionary < String , String > CaptureJpegIncludeRawBayerMetadata Gets or sets a value indicating whether the JPEG encoder should add raw bayer metadata. Declaration public bool CaptureJpegIncludeRawBayerMetadata { get; set; } Property Value Type Description Boolean CaptureJpegQuality Gets or sets the quality for JPEG only encoding mode. Value ranges from 0 to 100 Declaration public int CaptureJpegQuality { get; set; } Property Value Type Description Int32 CommandName Gets the command file executable. Declaration public override string CommandName { get; } Property Value Type Description String Overrides CameraSettingsBase.CommandName HorizontalFlip Gets or sets a value indicating whether [horizontal flip]. Declaration public bool HorizontalFlip { get; set; } Property Value Type Description Boolean true if [horizontal flip]; otherwise, false . Rotation Gets or sets the rotation. Declaration public int Rotation { get; set; } Property Value Type Description Int32 Exceptions Type Condition ArgumentOutOfRangeException Valid range 0-359 VerticalFlip Gets or sets a value indicating whether [vertical flip]. Declaration public bool VerticalFlip { get; set; } Property Value Type Description Boolean true if [vertical flip]; otherwise, false . Methods CreateProcessArguments() Creates the process arguments. Declaration public override string CreateProcessArguments() Returns Type Description String The string that represents the process arguments Overrides CameraSettingsBase.CreateProcessArguments() See Also CameraSettingsBase Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Camera.CameraRect.html": {
    "href": "api/Unosquare.RaspberryIO.Camera.CameraRect.html",
    "title": "Struct CameraRect | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Struct CameraRect Defines the Raspberry Pi camera's sensor ROI (Region of Interest) Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Unosquare.RaspberryIO.Camera Syntax public struct CameraRect Fields Default The default ROI which is the entire area. Declaration public static readonly CameraRect Default Field Value Type Description CameraRect Properties H Gets or sets the height in relative coordinates. (0.0 to 1.0) Declaration public decimal H { get; set; } Property Value Type Description Decimal The h. IsDefault Gets a value indicating whether this instance is equal to the default (The entire area). Declaration public bool IsDefault { get; } Property Value Type Description Boolean true if this instance is default; otherwise, false . W Gets or sets the width in relative coordinates. (0.0 to 1.0) Declaration public decimal W { get; set; } Property Value Type Description Decimal The w. X Gets or sets the x in relative coordinates. (0.0 to 1.0) Declaration public decimal X { get; set; } Property Value Type Description Decimal The x. Y Gets or sets the y location in relative coordinates. (0.0 to 1.0) Declaration public decimal Y { get; set; } Property Value Type Description Decimal The y. Methods Clamp() Clamps the members of this ROI to their minimum and maximum values Declaration public void Clamp() ToString() Returns a String that represents this instance. Declaration public override string ToString() Returns Type Description String A String that represents this instance. Overrides ValueType.ToString() Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Camera.CameraImageRotation.html": {
    "href": "api/Unosquare.RaspberryIO.Camera.CameraImageRotation.html",
    "title": "Enum CameraImageRotation | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Enum CameraImageRotation Defines the different image rotation modes for the Raspberry Pi's camera module Namespace : Unosquare.RaspberryIO.Camera Syntax public enum CameraImageRotation Fields Name Description Degrees180 180 Degrees Degrees270 270 degrees Degrees90 90 Degrees None No rerotation Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Camera.CameraImageEffect.html": {
    "href": "api/Unosquare.RaspberryIO.Camera.CameraImageEffect.html",
    "title": "Enum CameraImageEffect | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Enum CameraImageEffect Defines the available image effects for the Raspberry Pi's camera module Namespace : Unosquare.RaspberryIO.Camera Syntax public enum CameraImageEffect Fields Name Description Blackboard The blackboard Blur The blur Cartoon The cartoon ColourBalance The colour balance ColourPoint The colour point Denoise The denoise Emboss The emboss Film The film GPen Graphite Pen Hatch The hatch Negative The negative None No effect OilPaint The oil paint Pastel The pastel Saturation The saturation Sketch The sketch Solarise The solarise SolourSwap The solour swap WashedOut The washed out WaterColour The water colour Whiteboard The whiteboard Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Camera.CameraExposureMode.html": {
    "href": "api/Unosquare.RaspberryIO.Camera.CameraExposureMode.html",
    "title": "Enum CameraExposureMode | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Enum CameraExposureMode Defines the different exposure modes for the Raspberry Pi's camera module Namespace : Unosquare.RaspberryIO.Camera Syntax public enum CameraExposureMode Fields Name Description AntiShake The anti shake Auto The automatic Backlight The backlight Beach The beach Fireworks The fireworks FixedFps The fixed FPS Night The night NightPreview The night preview Snow The snow Sports The sports Spotlight The spotlight VeryLong The very long Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Camera.CameraController.html": {
    "href": "api/Unosquare.RaspberryIO.Camera.CameraController.html",
    "title": "Class CameraController | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Class CameraController The Raspberry Pi's camera controller wrapping raspistill and raspivid programs. This class is a singleton Inheritance Object CameraController Namespace : Unosquare.RaspberryIO.Camera Syntax public class CameraController : SingletonBase<CameraController> Properties IsBusy Gets a value indicating whether the camera module is busy. Declaration public bool IsBusy { get; } Property Value Type Description Boolean true if this instance is busy; otherwise, false . Methods CaptureImage(CameraStillSettings) Captures an image. Declaration public byte[] CaptureImage(CameraStillSettings settings) Parameters Type Name Description CameraStillSettings settings The settings. Returns Type Description Byte [] The image bytes CaptureImageAsync(CameraStillSettings, CancellationToken) Captures an image asynchronously. Declaration public Task<byte[]> CaptureImageAsync(CameraStillSettings settings, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description CameraStillSettings settings The settings. CancellationToken ct The ct. Returns Type Description Task < Byte []> The image bytes Exceptions Type Condition InvalidOperationException Cannot use camera module because it is currently busy. CaptureImageJpeg(Int32, Int32) Captures a JPEG encoded image at 90% quality. Declaration public byte[] CaptureImageJpeg(int width, int height) Parameters Type Name Description Int32 width The width. Int32 height The height. Returns Type Description Byte [] The image bytes CaptureImageJpegAsync(Int32, Int32, CancellationToken) Captures a JPEG encoded image asynchronously at 90% quality. Declaration public Task<byte[]> CaptureImageJpegAsync(int width, int height, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Int32 width The width. Int32 height The height. CancellationToken ct The ct. Returns Type Description Task < Byte []> The image bytes CloseVideoStream() Closes the video stream of a video stream is open. Declaration public void CloseVideoStream() OpenVideoStream(Action<Byte[]>, Action) Opens the video stream with a timeout of 0 (running indefinitely) at 1080p resolution, variable bitrate and 25 FPS. No preview is shown Declaration public void OpenVideoStream(Action<byte[]> onDataCallback, Action onExitCallback = null) Parameters Type Name Description Action < Byte []> onDataCallback The on data callback. Action onExitCallback The on exit callback. OpenVideoStream(CameraVideoSettings, Action<Byte[]>, Action) Opens the video stream with the supplied settings. Capture Timeout Milliseconds has to be 0 or greater Declaration public void OpenVideoStream(CameraVideoSettings settings, Action<byte[]> onDataCallback, Action onExitCallback) Parameters Type Name Description CameraVideoSettings settings The settings. Action < Byte []> onDataCallback The on data callback. Action onExitCallback The on exit callback. Exceptions Type Condition InvalidOperationException Cannot use camera module because it is currently busy. ArgumentException CaptureTimeoutMilliseconds Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Native.html": {
    "href": "api/Unosquare.RaspberryIO.Native.html",
    "title": "Namespace Unosquare.RaspberryIO.Native | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Namespace Unosquare.RaspberryIO.Native Classes HardwareException Represents a low-level exception, typically thrown when return codes from a low-level operation is non-zero or in some cases when it is less than zero. HighResolutionTimer Provides access to a high- esolution, time measuring device. Timing Provides access to timing and threading properties and methods WiringPi Provides native C WiringPi Library function call wrappers All credit for the native library goes to the author of http://wiringpi.com/ The wrappers were written based on https://github.com/WiringPi/WiringPi/blob/master/wiringPi/wiringPi.h Enums ThreadLockKey Defines the different threading locking keys Delegates InterruptServiceRoutineCallback A delegate defining a callback for an Interrupt Service Routine ThreadWorker Defines the body of a thread worker Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Native.WiringPi.html": {
    "href": "api/Unosquare.RaspberryIO.Native.WiringPi.html",
    "title": "Class WiringPi | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Class WiringPi Provides native C WiringPi Library function call wrappers All credit for the native library goes to the author of http://wiringpi.com/ The wrappers were written based on https://github.com/WiringPi/WiringPi/blob/master/wiringPi/wiringPi.h Inheritance Object WiringPi Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.RaspberryIO.Native Syntax public class WiringPi Methods AnalogRead(Int32) This returns the value read on the supplied analog input pin. You will need to register additional analog modules to enable this function for devices such as the Gertboard, quick2Wire analog board, etc. Declaration public static int AnalogRead(int pin) Parameters Type Name Description Int32 pin The pin. Returns Type Description Int32 The result code AnalogWrite(Int32, Int32) This writes the given value to the supplied analog pin. You will need to register additional analog modules to enable this function for devices such as the Gertboard. Declaration public static void AnalogWrite(int pin, int value) Parameters Type Name Description Int32 pin The pin. Int32 value The value. Delay(UInt32) This causes program execution to pause for at least howLong milliseconds. Due to the multi-tasking nature of Linux it could be longer. Note that the maximum delay is an unsigned 32-bit integer or approximately 49 days. Declaration public static void Delay(uint howLong) Parameters Type Name Description UInt32 howLong The how long. DelayMicroseconds(UInt32) This causes program execution to pause for at least howLong microseconds. Due to the multi-tasking nature of Linux it could be longer. Note that the maximum delay is an unsigned 32-bit integer microseconds or approximately 71 minutes. Delays under 100 microseconds are timed using a hard-coded loop continually polling the system time, Delays over 100 microseconds are done using the system nanosleep() function – You may need to consider the implications of very short delays on the overall performance of the system, especially if using threads. Declaration public static void DelayMicroseconds(uint howLong) Parameters Type Name Description UInt32 howLong The how long. DigitalRead(Int32) This function returns the value read at the given pin. It will be HIGH or LOW (1 or 0) depending on the logic level at the pin. Declaration public static int DigitalRead(int pin) Parameters Type Name Description Int32 pin The pin. Returns Type Description Int32 The result code DigitalReadByte() Undocumented function This reads the 8-bit byte supplied to the first 8 GPIO pins. It’s the fastest way to get all 8 bits at once to a particular value. Declaration public static uint DigitalReadByte() Returns Type Description UInt32 The result code DigitalReadByte2() Undocumented function This reads the 8-bit byte supplied to the first 8 GPIO pins. It’s the fastest way to get all 8 bits at once to a particular value. Declaration public static uint DigitalReadByte2() Returns Type Description UInt32 The result code DigitalWrite(Int32, Int32) Writes the value HIGH or LOW (1 or 0) to the given pin which must have been previously set as an output. WiringPi treats any non-zero number as HIGH, however 0 is the only representation of LOW. Declaration public static void DigitalWrite(int pin, int value) Parameters Type Name Description Int32 pin The pin. Int32 value The value. DigitalWriteByte(Int32) This writes the 8-bit byte supplied to the first 8 GPIO pins. It’s the fastest way to set all 8 bits at once to a particular value, although it still takes two write operations to the Pi’s GPIO hardware. Declaration public static void DigitalWriteByte(int value) Parameters Type Name Description Int32 value The value. DigitalWriteByte2(Int32) This writes the 8-bit byte supplied to the first 8 GPIO pins. It’s the fastest way to set all 8 bits at once to a particular value, although it still takes two write operations to the Pi’s GPIO hardware. Declaration public static void DigitalWriteByte2(int value) Parameters Type Name Description Int32 value The value. GetAlt(Int32) Undocumented function Declaration public static int GetAlt(int pin) Parameters Type Name Description Int32 pin The pin. Returns Type Description Int32 The result code GpioClockSet(Int32, Int32) Undocumented function Declaration public static void GpioClockSet(int pin, int freq) Parameters Type Name Description Int32 pin The pin. Int32 freq The freq. Micros() This returns a number representing the number of microseconds since your program called one of the wiringPiSetup functions. It returns an unsigned 32-bit number which wraps after approximately 71 minutes. Declaration public static uint Micros() Returns Type Description UInt32 The result code Millis() This returns a number representing the number of milliseconds since your program called one of the wiringPiSetup functions. It returns an unsigned 32-bit number which wraps after 49 days. Declaration public static uint Millis() Returns Type Description UInt32 The result code PhysPinToGpio(Int32) This returns the BCM_GPIO pin number of the supplied physical pin on the P1 connector. Declaration public static int PhysPinToGpio(int physPin) Parameters Type Name Description Int32 physPin The physical pin. Returns Type Description Int32 The result code PiBoardId(ref Int32, ref Int32, ref Int32, ref Int32) This function is undocumented Declaration public static int PiBoardId(ref int model, ref int mem, ref int maker, ref int overVolted) Parameters Type Name Description Int32 model The model. Int32 mem The memory. Int32 maker The maker. Int32 overVolted The over volted. Returns Type Description Int32 The result code PiBoardRev() This returns the board revision of the Raspberry Pi. It will be either 1 or 2. Some of the BCM_GPIO pins changed number and function when moving from board revision 1 to 2, so if you are using BCM_GPIO pin numbers, then you need to be aware of the differences. Declaration public static int PiBoardRev() Returns Type Description Int32 The result code PiHiPri(Int32) This attempts to shift your program (or thread in a multi-threaded program) to a higher priority and enables a real-time scheduling. The priority parameter should be from 0 (the default) to 99 (the maximum). This won’t make your program go any faster, but it will give it a bigger slice of time when other programs are running. The priority parameter works relative to others – so you can make one program priority 1 and another priority 2 and it will have the same effect as setting one to 10 and the other to 90 (as long as no other programs are running with elevated priorities) The return value is 0 for success and -1 for error. If an error is returned, the program should then consult the errno global variable, as per the usual conventions. Note: Only programs running as root can change their priority. If called from a non-root program then nothing happens. Declaration public static int PiHiPri(int priority) Parameters Type Name Description Int32 priority The priority. Returns Type Description Int32 The result code PiLock(Int32) These allow you to synchronise variable updates from your main program to any threads running in your program. keyNum is a number from 0 to 3 and represents a key. When another process tries to lock the same key, it will be stalled until the first process has unlocked the same key. You may need to use these functions to ensure that you get valid data when exchanging data between your main program and a thread – otherwise it’s possible that the thread could wake-up halfway during your data copy and change the data – so the data you end up copying is incomplete, or invalid. See the wfi.c program in the examples directory for an example. Declaration public static void PiLock(int key) Parameters Type Name Description Int32 key The key. PinMode(Int32, Int32) This sets the mode of a pin to either INPUT, OUTPUT, PWM_OUTPUT or GPIO_CLOCK. Note that only wiringPi pin 1 (BCM_GPIO 18) supports PWM output and only wiringPi pin 7 (BCM_GPIO 4) supports CLOCK output modes. This function has no effect when in Sys mode. If you need to change the pin mode, then you can do it with the gpio program in a script before you start your program. Declaration public static void PinMode(int pin, int mode) Parameters Type Name Description Int32 pin The pin. Int32 mode The mode. PinModeAlt(Int32, Int32) This function is undocumented Declaration public static void PinModeAlt(int pin, int mode) Parameters Type Name Description Int32 pin The pin. Int32 mode The mode. PiThreadCreate(ThreadWorker) This function creates a thread which is another function in your program previously declared using the PI_THREAD declaration. This function is then run concurrently with your main program. An example may be to have this function wait for an interrupt while your program carries on doing other tasks. The thread can indicate an event, or action by using global variables to communicate back to the main program, or other threads. Declaration public static int PiThreadCreate(ThreadWorker method) Parameters Type Name Description ThreadWorker method The method. Returns Type Description Int32 The result code PiUnlock(Int32) These allow you to synchronise variable updates from your main program to any threads running in your program. keyNum is a number from 0 to 3 and represents a key. When another process tries to lock the same key, it will be stalled until the first process has unlocked the same key. You may need to use these functions to ensure that you get valid data when exchanging data between your main program and a thread – otherwise it’s possible that the thread could wake-up halfway during your data copy and change the data – so the data you end up copying is incomplete, or invalid. See the wfi.c program in the examples directory for an example. Declaration public static void PiUnlock(int key) Parameters Type Name Description Int32 key The key. PullUpDnControl(Int32, Int32) This sets the pull-up or pull-down resistor mode on the given pin, which should be set as an input. Unlike the Arduino, the BCM2835 has both pull-up an down internal resistors. The parameter pud should be; PUD_OFF, (no pull up/down), PUD_DOWN (pull to ground) or PUD_UP (pull to 3.3v) The internal pull up/down resistors have a value of approximately 50KΩ on the Raspberry Pi. This function has no effect on the Raspberry Pi’s GPIO pins when in Sys mode. If you need to activate a pull-up/pull-down, then you can do it with the gpio program in a script before you start your program. Declaration public static void PullUpDnControl(int pin, int pud) Parameters Type Name Description Int32 pin The pin. Int32 pud The pud. PwmSetClock(Int32) This sets the divisor for the PWM clock. Note: The PWM control functions can not be used when in Sys mode. To understand more about the PWM system, you’ll need to read the Broadcom ARM peripherals manual. Declaration public static void PwmSetClock(int divisor) Parameters Type Name Description Int32 divisor The divisor. PwmSetMode(Int32) The PWM generator can run in 2 modes – “balanced” and “mark:space”. The mark:space mode is traditional, however the default mode in the Pi is “balanced”. You can switch modes by supplying the parameter: PWM_MODE_BAL or PWM_MODE_MS. Declaration public static void PwmSetMode(int mode) Parameters Type Name Description Int32 mode The mode. PwmSetRange(UInt32) This sets the range register in the PWM generator. The default is 1024. Declaration public static void PwmSetRange(uint range) Parameters Type Name Description UInt32 range The range. PwmToneWrite(Int32, Int32) Undocumented function Declaration public static int PwmToneWrite(int pin, int freq) Parameters Type Name Description Int32 pin The pin. Int32 freq The freq. Returns Type Description Int32 The result code PwmWrite(Int32, Int32) Writes the value to the PWM register for the given pin. The Raspberry Pi has one on-board PWM pin, pin 1 (BMC_GPIO 18, Phys 12) and the range is 0-1024. Other PWM devices may have other PWM ranges. This function is not able to control the Pi’s on-board PWM when in Sys mode. Declaration public static void PwmWrite(int pin, int value) Parameters Type Name Description Int32 pin The pin. Int32 value The value. SerialClose(Int32) Closes the device identified by the file descriptor given. Declaration public static int SerialClose(int fd) Parameters Type Name Description Int32 fd The fd. Returns Type Description Int32 The result SerialDataAvail(Int32) Returns the number of characters available for reading, or -1 for any error condition, in which case errno will be set appropriately. Declaration public static int SerialDataAvail(int fd) Parameters Type Name Description Int32 fd The fd. Returns Type Description Int32 The result SerialFlush(Int32) This discards all data received, or waiting to be send down the given device. Declaration public static void SerialFlush(int fd) Parameters Type Name Description Int32 fd The fd. SerialGetchar(Int32) Returns the next character available on the serial device. This call will block for up to 10 seconds if no data is available (when it will return -1) Declaration public static int SerialGetchar(int fd) Parameters Type Name Description Int32 fd The fd. Returns Type Description Int32 The result SerialOpen(String, Int32) This opens and initialises the serial device and sets the baud rate. It sets the port into “raw” mode (character at a time and no translations), and sets the read timeout to 10 seconds. The return value is the file descriptor or -1 for any error, in which case errno will be set as appropriate. The wiringSerial library is intended to provide simplified control – suitable for most applications, however if you need advanced control – e.g. parity control, modem control lines (via a USB adapter, there are none on the Pi’s on-board UART!) and so on, then you need to do some of this the old fashioned way. Declaration public static int SerialOpen(string device, int baud) Parameters Type Name Description String device The device. Int32 baud The baud. Returns Type Description Int32 The result SerialPutchar(Int32, Byte) Sends the single byte to the serial device identified by the given file descriptor. Declaration public static void SerialPutchar(int fd, byte c) Parameters Type Name Description Int32 fd The fd. Byte c The c. SerialPuts(Int32, String) Sends the nul-terminated string to the serial device identified by the given file descriptor. Declaration public static void SerialPuts(int fd, string s) Parameters Type Name Description Int32 fd The fd. String s The s. SetPadDrive(Int32, Int32) This sets the “strength” of the pad drivers for a particular group of pins. There are 3 groups of pins and the drive strength is from 0 to 7. Do not use this unless you know what you are doing. Declaration public static int SetPadDrive(int group, int value) Parameters Type Name Description Int32 group The group. Int32 value The value. Returns Type Description Int32 The result code ShiftIn(Byte, Byte, Byte) This shifts an 8-bit data value in with the data appearing on the dPin and the clock being sent out on the cPin. Order is either LSBFIRST or MSBFIRST. The data is sampled after the cPin goes high. (So cPin high, sample data, cPin low, repeat for 8 bits) The 8-bit value is returned by the function. Declaration public static byte ShiftIn(byte dPin, byte cPin, byte order) Parameters Type Name Description Byte dPin The d pin. Byte cPin The c pin. Byte order The order. Returns Type Description Byte The result ShiftOut(Byte, Byte, Byte, Byte) The shifts an 8-bit data value val out with the data being sent out on dPin and the clock being sent out on the cPin. order is as above. Data is clocked out on the rising or falling edge – ie. dPin is set, then cPin is taken high then low – repeated for the 8 bits. Declaration public static void ShiftOut(byte dPin, byte cPin, byte order, byte val) Parameters Type Name Description Byte dPin The d pin. Byte cPin The c pin. Byte order The order. Byte val The value. SoftPwmCreate(Int32, Int32, Int32) This creates a software controlled PWM pin. You can use any GPIO pin and the pin numbering will be that of the wiringPiSetup() function you used. Use 100 for the pwmRange, then the value can be anything from 0 (off) to 100 (fully on) for the given pin. The return value is 0 for success. Anything else and you should check the global errno variable to see what went wrong. Declaration public static int SoftPwmCreate(int pin, int initialValue, int pwmRange) Parameters Type Name Description Int32 pin The pin. Int32 initialValue The initial value. Int32 pwmRange The PWM range. Returns Type Description Int32 The result SoftPwmStop(Int32) This function is undocumented Declaration public static void SoftPwmStop(int pin) Parameters Type Name Description Int32 pin The pin. SoftPwmWrite(Int32, Int32) This updates the PWM value on the given pin. The value is checked to be in-range and pins that haven’t previously been initialized via softPwmCreate will be silently ignored. Declaration public static void SoftPwmWrite(int pin, int value) Parameters Type Name Description Int32 pin The pin. Int32 value The value. SoftToneCreate(Int32) This creates a software controlled tone pin. You can use any GPIO pin and the pin numbering will be that of the wiringPiSetup() function you used. The return value is 0 for success. Anything else and you should check the global errno variable to see what went wrong. Declaration public static int SoftToneCreate(int pin) Parameters Type Name Description Int32 pin The pin. Returns Type Description Int32 The result SoftToneStop(Int32) This function is undocumented Declaration public static void SoftToneStop(int pin) Parameters Type Name Description Int32 pin The pin. SoftToneWrite(Int32, Int32) This updates the tone frequency value on the given pin. The tone will be played until you set the frequency to 0. Declaration public static void SoftToneWrite(int pin, int freq) Parameters Type Name Description Int32 pin The pin. Int32 freq The freq. WaitForInterrupt(Int32, Int32) Note: Jan 2013: The waitForInterrupt() function is deprecated – you should use the newer and easier to use wiringPiISR() function below. When called, it will wait for an interrupt event to happen on that pin and your program will be stalled. The timeOut parameter is given in milliseconds, or can be -1 which means to wait forever. The return value is -1 if an error occurred (and errno will be set appropriately), 0 if it timed out, or 1 on a successful interrupt event. Before you call waitForInterrupt, you must first initialise the GPIO pin and at present the only way to do this is to use the gpio program, either in a script, or using the system() call from inside your program. e.g. We want to wait for a falling-edge interrupt on GPIO pin 0, so to setup the hardware, we need to run: gpio edge 0 falling before running the program. Declaration [Obsolete] public static int WaitForInterrupt(int pin, int timeout) Parameters Type Name Description Int32 pin The pin. Int32 timeout The timeout. Returns Type Description Int32 The result code WiringPiI2CRead(Int32) Simple device read. Some devices present data when you read them without having to do any register transactions. Declaration public static int WiringPiI2CRead(int fd) Parameters Type Name Description Int32 fd The fd. Returns Type Description Int32 The result WiringPiI2CReadReg16(Int32, Int32) These read a 16-bit value from the device register indicated. Declaration public static int WiringPiI2CReadReg16(int fd, int reg) Parameters Type Name Description Int32 fd The fd. Int32 reg The reg. Returns Type Description Int32 The result WiringPiI2CReadReg8(Int32, Int32) These read an 8-bit value from the device register indicated. Declaration public static int WiringPiI2CReadReg8(int fd, int reg) Parameters Type Name Description Int32 fd The fd. Int32 reg The reg. Returns Type Description Int32 The result WiringPiI2CSetup(Int32) This initialises the I2C system with your given device identifier. The ID is the I2C number of the device and you can use the i2cdetect program to find this out. wiringPiI2CSetup() will work out which revision Raspberry Pi you have and open the appropriate device in /dev. The return value is the standard Linux filehandle, or -1 if any error – in which case, you can consult errno as usual. E.g. the popular MCP23017 GPIO expander is usually device Id 0x20, so this is the number you would pass into wiringPiI2CSetup(). Declaration public static int WiringPiI2CSetup(int devId) Parameters Type Name Description Int32 devId The dev identifier. Returns Type Description Int32 The result WiringPiI2CWrite(Int32, Int32) Simple device write. Some devices accept data this way without needing to access any internal registers. Declaration public static int WiringPiI2CWrite(int fd, int data) Parameters Type Name Description Int32 fd The fd. Int32 data The data. Returns Type Description Int32 The result WiringPiI2CWriteReg16(Int32, Int32, Int32) These write a 16-bit data value into the device register indicated. Declaration public static int WiringPiI2CWriteReg16(int fd, int reg, int data) Parameters Type Name Description Int32 fd The fd. Int32 reg The reg. Int32 data The data. Returns Type Description Int32 The result WiringPiI2CWriteReg8(Int32, Int32, Int32) These write an 8-bit data value into the device register indicated. Declaration public static int WiringPiI2CWriteReg8(int fd, int reg, int data) Parameters Type Name Description Int32 fd The fd. Int32 reg The reg. Int32 data The data. Returns Type Description Int32 The result WiringPiISR(Int32, Int32, InterruptServiceRoutineCallback) This function registers a function to received interrupts on the specified pin. The edgeType parameter is either INT_EDGE_FALLING, INT_EDGE_RISING, INT_EDGE_BOTH or INT_EDGE_SETUP. If it is INT_EDGE_SETUP then no initialisation of the pin will happen – it’s assumed that you have already setup the pin elsewhere (e.g. with the gpio program), but if you specify one of the other types, then the pin will be exported and initialised as specified. This is accomplished via a suitable call to the gpio utility program, so it need to be available. The pin number is supplied in the current mode – native wiringPi, BCM_GPIO, physical or Sys modes. This function will work in any mode, and does not need root privileges to work. The function will be called when the interrupt triggers. When it is triggered, it’s cleared in the dispatcher before calling your function, so if a subsequent interrupt fires before you finish your handler, then it won’t be missed. (However it can only track one more interrupt, if more than one interrupt fires while one is being handled then they will be ignored) This function is run at a high priority (if the program is run using sudo, or as root) and executes concurrently with the main program. It has full access to all the global variables, open file handles and so on. Declaration public static int WiringPiISR(int pin, int mode, InterruptServiceRoutineCallback method) Parameters Type Name Description Int32 pin The pin. Int32 mode The mode. InterruptServiceRoutineCallback method The method. Returns Type Description Int32 The result code WiringPiSetup() This initialises wiringPi and assumes that the calling program is going to be using the wiringPi pin numbering scheme. This is a simplified numbering scheme which provides a mapping from virtual pin numbers 0 through 16 to the real underlying Broadcom GPIO pin numbers. See the pins page for a table which maps the wiringPi pin number to the Broadcom GPIO pin number to the physical location on the edge connector. This function needs to be called with root privileges. Declaration public static int WiringPiSetup() Returns Type Description Int32 The result code WiringPiSetupGpio() This is identical to wiringPiSetup, however it allows the calling programs to use the Broadcom GPIO pin numbers directly with no re-mapping. As above, this function needs to be called with root privileges, and note that some pins are different from revision 1 to revision 2 boards. Declaration public static int WiringPiSetupGpio() Returns Type Description Int32 The result code WiringPiSetupPhys() Identical to wiringPiSetup, however it allows the calling programs to use the physical pin numbers on the P1 connector only. This function needs to be called with root privileges. Declaration public static int WiringPiSetupPhys() Returns Type Description Int32 The result code WiringPiSetupSys() This initialises wiringPi but uses the /sys/class/gpio interface rather than accessing the hardware directly. This can be called as a non-root user provided the GPIO pins have been exported before-hand using the gpio program. Pin numbering in this mode is the native Broadcom GPIO numbers – the same as wiringPiSetupGpio() above, so be aware of the differences between Rev 1 and Rev 2 boards. Note: In this mode you can only use the pins which have been exported via the /sys/class/gpio interface before you run your program. You can do this in a separate shell-script, or by using the system() function from inside your program to call the gpio program. Also note that some functions have no effect when using this mode as they’re not currently possible to action unless called with root privileges. (although you can use system() to call gpio to set/change modes if needed) Declaration public static int WiringPiSetupSys() Returns Type Description Int32 The result code WiringPiSPIDataRW(Int32, Byte[], Int32) This performs a simultaneous write/read transaction over the selected SPI bus. Data that was in your buffer is overwritten by data returned from the SPI bus. That’s all there is in the helper library. It is possible to do simple read and writes over the SPI bus using the standard read() and write() system calls though – write() may be better to use for sending data to chains of shift registers, or those LED strings where you send RGB triplets of data. Devices such as A/D and D/A converters usually need to perform a concurrent write/read transaction to work. Declaration public static int WiringPiSPIDataRW(int channel, byte[] data, int len) Parameters Type Name Description Int32 channel The channel. Byte [] data The data. Int32 len The length. Returns Type Description Int32 The result WiringPiSPIGetFd(Int32) This function is undocumented Declaration public static int WiringPiSPIGetFd(int channel) Parameters Type Name Description Int32 channel The channel. Returns Type Description Int32 Unknown WiringPiSPISetup(Int32, Int32) This is the way to initialize a channel (The Pi has 2 channels; 0 and 1). The speed parameter is an integer in the range 500,000 through 32,000,000 and represents the SPI clock speed in Hz. The returned value is the Linux file-descriptor for the device, or -1 on error. If an error has happened, you may use the standard errno global variable to see why. Declaration public static int WiringPiSPISetup(int channel, int speed) Parameters Type Name Description Int32 channel The channel. Int32 speed The speed. Returns Type Description Int32 The Linux file descriptor for the device or -1 for error WiringPiSPISetupMode(Int32, Int32, Int32) This function is undocumented Declaration public static int WiringPiSPISetupMode(int channel, int speed, int mode) Parameters Type Name Description Int32 channel The channel. Int32 speed The speed. Int32 mode The mode. Returns Type Description Int32 Unkown WpiPinToGpio(Int32) This returns the BCM_GPIO pin number of the supplied wiringPi pin. It takes the board revision into account. Declaration public static int WpiPinToGpio(int wPiPin) Parameters Type Name Description Int32 wPiPin The w pi pin. Returns Type Description Int32 The result code Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Native.Timing.html": {
    "href": "api/Unosquare.RaspberryIO.Native.Timing.html",
    "title": "Class Timing | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Class Timing Provides access to timing and threading properties and methods Inheritance Object Timing Namespace : Unosquare.RaspberryIO.Native Syntax public class Timing : SingletonBase<Timing> Properties MicrosecondsSinceSetup This returns a number representing the number of microseconds since your program initialized the GPIO controller It returns an unsigned 32-bit number which wraps after approximately 71 minutes. Declaration public uint MicrosecondsSinceSetup { get; } Property Value Type Description UInt32 The microseconds since setup. MillisecondsSinceSetup This returns a number representing the number of milliseconds since your program initialized the GPIO controller. It returns an unsigned 32-bit number which wraps after 49 days. Declaration public uint MillisecondsSinceSetup { get; } Property Value Type Description UInt32 The milliseconds since setup. Methods CreateThread(ThreadWorker) This is really nothing more than a simplified interface to the Posix threads mechanism that Linux supports. See the manual pages on Posix threads (man pthread) if you need more control over them. Declaration public void CreateThread(ThreadWorker worker) Parameters Type Name Description ThreadWorker worker The worker. Exceptions Type Condition ArgumentNullException worker Lock(ThreadLockKey) These allow you to synchronize variable updates from your main program to any threads running in your program. keyNum is a number from 0 to 3 and represents a “key”. When another process tries to lock the same key, it will be stalled until the first process has unlocked the same key. Declaration public void Lock(ThreadLockKey key) Parameters Type Name Description ThreadLockKey key The key. SetThreadPriority(Int32) This attempts to shift your program (or thread in a multi-threaded program) to a higher priority and enables a real-time scheduling. The priority parameter should be from 0 (the default) to 99 (the maximum). This won’t make your program go any faster, but it will give it a bigger slice of time when other programs are running. The priority parameter works relative to others – so you can make one program priority 1 and another priority 2 and it will have the same effect as setting one to 10 and the other to 90 (as long as no other programs are running with elevated priorities) Declaration public void SetThreadPriority(int priority) Parameters Type Name Description Int32 priority The priority. SleepMicroseconds(UInt32) This causes program execution to pause for at least howLong microseconds. Due to the multi-tasking nature of Linux it could be longer. Note that the maximum delay is an unsigned 32-bit integer microseconds or approximately 71 minutes. Delays under 100 microseconds are timed using a hard-coded loop continually polling the system time, Delays over 100 microseconds are done using the system nanosleep() function – You may need to consider the implications of very short delays on the overall performance of the system, especially if using threads. Declaration public void SleepMicroseconds(uint value) Parameters Type Name Description UInt32 value The value. SleepMilliseconds(UInt32) This causes program execution to pause for at least howLong milliseconds. Due to the multi-tasking nature of Linux it could be longer. Note that the maximum delay is an unsigned 32-bit integer or approximately 49 days. Declaration public static void SleepMilliseconds(uint value) Parameters Type Name Description UInt32 value The value. Unlock(ThreadLockKey) These allow you to synchronize variable updates from your main program to any threads running in your program. keyNum is a number from 0 to 3 and represents a “key”. When another process tries to lock the same key, it will be stalled until the first process has unlocked the same key. Declaration public void Unlock(ThreadLockKey key) Parameters Type Name Description ThreadLockKey key The key. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Native.ThreadWorker.html": {
    "href": "api/Unosquare.RaspberryIO.Native.ThreadWorker.html",
    "title": "Delegate ThreadWorker | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Delegate ThreadWorker Defines the body of a thread worker Namespace : Unosquare.RaspberryIO.Native Syntax public delegate void ThreadWorker(); Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Native.HighResolutionTimer.html": {
    "href": "api/Unosquare.RaspberryIO.Native.HighResolutionTimer.html",
    "title": "Class HighResolutionTimer | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Class HighResolutionTimer Provides access to a high- esolution, time measuring device. Inheritance Object HighResolutionTimer Namespace : Unosquare.RaspberryIO.Native Syntax public class HighResolutionTimer : Stopwatch Constructors HighResolutionTimer() Initializes a new instance of the HighResolutionTimer class. Declaration public HighResolutionTimer() Exceptions Type Condition NotSupportedException High-resolution timer not available Properties ElapsedMicroseconds Gets the elapsed microseconds. Declaration public long ElapsedMicroseconds { get; } Property Value Type Description Int64 MicrosecondsPerTick Gets the numer of microseconds per timer tick. Declaration public static double MicrosecondsPerTick { get; } Property Value Type Description Double Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Native.HardwareException.html": {
    "href": "api/Unosquare.RaspberryIO.Native.HardwareException.html",
    "title": "Class HardwareException | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Class HardwareException Represents a low-level exception, typically thrown when return codes from a low-level operation is non-zero or in some cases when it is less than zero. Inheritance Object Exception HardwareException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : Unosquare.RaspberryIO.Native Syntax public class HardwareException : Exception, ISerializable, _Exception Constructors HardwareException(Int32, String) Initializes a new instance of the HardwareException class. Declaration public HardwareException(int errorCode, string component) Parameters Type Name Description Int32 errorCode The error code. String component The component. Properties Component Gets the component. Declaration public string Component { get; } Property Value Type Description String The component. ErrorCode Gets the error code. Declaration public int ErrorCode { get; } Property Value Type Description Int32 The error code. ExtendedMessage Gets the extended message (could be null). Declaration public string ExtendedMessage { get; } Property Value Type Description String The extended message. Methods Throw(String, String) Throws a new instance of a hardware error by retrieving the last error number (errno). Declaration public static void Throw(string className, string methodName) Parameters Type Name Description String className Name of the class. String methodName Name of the method. Exceptions Type Condition HardwareException When an error thrown by an API call occurs ToString() Declaration public override string ToString() Returns Type Description String Overrides Exception.ToString() Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception See Also Exception Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Gpio.SpiChannel.html": {
    "href": "api/Unosquare.RaspberryIO.Gpio.SpiChannel.html",
    "title": "Class SpiChannel | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Class SpiChannel Provides access to using the SPI buses on the GPIO. SPI is a bus that works like a ring shift register The number of bytes pushed is equal to the number of bytes received. Inheritance Object SpiChannel Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.RaspberryIO.Gpio Syntax public sealed class SpiChannel Fields DefaultFrequency The default frequency of SPI channels This is set to 8 Mhz wich is typical in modern hardware. Declaration public const int DefaultFrequency = 8000000 Field Value Type Description Int32 MaxFrequency The maximum frequency of an SPI channel Declaration public const int MaxFrequency = 32000000 Field Value Type Description Int32 MinFrequency The minimum frequency of an SPI Channel Declaration public const int MinFrequency = 500000 Field Value Type Description Int32 Properties Channel Gets the channel. Declaration public int Channel { get; } Property Value Type Description Int32 FileDescriptor Gets the standard initialization file descriptor. anything negative means error. Declaration public int FileDescriptor { get; } Property Value Type Description Int32 The file descriptor. Frequency Gets the frequency. Declaration public int Frequency { get; } Property Value Type Description Int32 Methods SendReceive(Byte[]) Sends data and simultaneously receives the data in the return buffer Declaration public byte[] SendReceive(byte[] buffer) Parameters Type Name Description Byte [] buffer The buffer. Returns Type Description Byte [] The read bytes from the ring-style bus SendReceiveAsync(Byte[]) Sends data and simultaneously receives the data in the return buffer Declaration public Task<byte[]> SendReceiveAsync(byte[] buffer) Parameters Type Name Description Byte [] buffer The buffer. Returns Type Description Task < Byte []> The read bytes from the ring-style bus Write(Byte[]) Writes the specified buffer the the underlying FileDescriptor. Do not use this method if you expect data back. This method is efficient if used in a fire-and-forget scenario like sending data over to those long RGB LED strips Declaration public void Write(byte[] buffer) Parameters Type Name Description Byte [] buffer The buffer. WriteAsync(Byte[]) Writes the specified buffer the the underlying FileDescriptor. Do not use this method if you expect data back. This method is efficient if used in a fire-and-forget scenario like sending data over to those long RGB LED strips Declaration public Task WriteAsync(byte[] buffer) Parameters Type Name Description Byte [] buffer The buffer. Returns Type Description Task The awaitable task Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Gpio.SpiBus.html": {
    "href": "api/Unosquare.RaspberryIO.Gpio.SpiBus.html",
    "title": "Class SpiBus | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Class SpiBus The SPI Bus containing the 2 SPI channels Inheritance Object SpiBus Namespace : Unosquare.RaspberryIO.Gpio Syntax public class SpiBus : SingletonBase<SpiBus> Properties Channel0 Gets the SPI bus on channel 1. Declaration public SpiChannel Channel0 { get; } Property Value Type Description SpiChannel The channel0. Channel0Frequency Gets or sets the channel 0 frequency in Hz. Declaration public int Channel0Frequency { get; set; } Property Value Type Description Int32 The channel0 frequency. Channel1 Gets the SPI bus on channel 1. Declaration public SpiChannel Channel1 { get; } Property Value Type Description SpiChannel The channel1. Channel1Frequency Gets or sets the channel 1 frequency in Hz Declaration public int Channel1Frequency { get; set; } Property Value Type Description Int32 The channel1 frequency. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Gpio.P5.html": {
    "href": "api/Unosquare.RaspberryIO.Gpio.P5.html",
    "title": "Enum P5 | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Enum P5 Enumerates the different pins on the P5 Header as commonly referenced by Raspberry Pi documentation. Enumeration values correspond to the physical pin number. Namespace : Unosquare.RaspberryIO.Gpio Syntax public enum P5 Fields Name Description Gpio28 Header P5, GPIO Pin 28 Gpio29 Header P5, GPIO Pin 29 Gpio30 Header P5, GPIO Pin 30 Gpio31 Header P5, GPIO Pin 31 Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Gpio.P1.html": {
    "href": "api/Unosquare.RaspberryIO.Gpio.P1.html",
    "title": "Enum P1 | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Enum P1 Enumerates the different pins on the P1 Header as commonly referenced by Raspberry Pi Documentation. Enumeration values correspond to the physical pin number. Namespace : Unosquare.RaspberryIO.Gpio Syntax public enum P1 Fields Name Description Gpio02 Header P1, GPIO Pin 02 Gpio03 Header P1, GPIO Pin 03 Gpio04 Header P1, GPIO Pin 04 Gpio05 Header P1, GPIO Pin 05 Gpio06 Header P1, GPIO Pin 06 Gpio07 Header P1, GPIO Pin 07 Gpio08 Header P1, GPIO Pin 08 Gpio09 Header P1, GPIO Pin 09 Gpio10 Header P1, GPIO Pin 10 Gpio11 Header P1, GPIO Pin 11 Gpio12 Header P1, GPIO Pin 12 Gpio13 Header P1, GPIO Pin 13 Gpio14 Header P1, GPIO Pin 14 Gpio15 Header P1, GPIO Pin 15 Gpio16 Header P1, GPIO Pin 16 Gpio17 Header P1, GPIO Pin 17 Gpio18 Header P1, GPIO Pin 18 Gpio19 Header P1, GPIO Pin 19 Gpio20 Header P1, GPIO Pin 20 Gpio21 Header P1, GPIO Pin 21 Gpio22 Header P1, GPIO Pin 22 Gpio23 Header P1, GPIO Pin 23 Gpio24 Header P1, GPIO Pin 24 Gpio25 Header P1, GPIO Pin 25 Gpio26 Header P1, GPIO Pin 26 Gpio27 Header P1, GPIO Pin 27 Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Gpio.GpioPinValue.html": {
    "href": "api/Unosquare.RaspberryIO.Gpio.GpioPinValue.html",
    "title": "Enum GpioPinValue | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Enum GpioPinValue Defines the GPIO Pin values 0 for low, 1 for High Namespace : Unosquare.RaspberryIO.Gpio Syntax public enum GpioPinValue Fields Name Description High Digital high Low Digital low Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Gpio.GpioPinResistorPullMode.html": {
    "href": "api/Unosquare.RaspberryIO.Gpio.GpioPinResistorPullMode.html",
    "title": "Enum GpioPinResistorPullMode | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Enum GpioPinResistorPullMode The GPIO pin resistor mode. This is used on input pins so that their lines are not floating Namespace : Unosquare.RaspberryIO.Gpio Syntax public enum GpioPinResistorPullMode Fields Name Description Off Pull resistor not active. Line floating PullDown Pull resistor sets a default value of 0 on no-connects PullUp Pull resistor sets a default value of 1 on no-connects Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Gpio.GpioPinDriveMode.html": {
    "href": "api/Unosquare.RaspberryIO.Gpio.GpioPinDriveMode.html",
    "title": "Enum GpioPinDriveMode | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Enum GpioPinDriveMode Defines the different drive modes of a GPIO pin Namespace : Unosquare.RaspberryIO.Gpio Syntax public enum GpioPinDriveMode Fields Name Description GpioClock GPIO Clock output mode (only a pin supports this at this time) Input Input drive mode (perform reads) Output Output drive mode (perform writes) PwmOutput PWM output mode (only certain pins support this -- 2 of them at the moment) Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Gpio.GpioPin.html": {
    "href": "api/Unosquare.RaspberryIO.Gpio.GpioPin.html",
    "title": "Class GpioPin | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Class GpioPin Represents a GPIO Pin, its location and its capabilities. Full pin reference available here: http://pinout.xyz/pinout/pin31_gpio6 and http://wiringpi.com/pins/ Inheritance Object GpioPin Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.RaspberryIO.Gpio Syntax public sealed class GpioPin Properties BcmPinNumber Gets the BCM chip (hardware) pin number. Declaration public int BcmPinNumber { get; } Property Value Type Description Int32 Capabilities Gets the hardware mode capabilities of this pin. Declaration public PinCapability[] Capabilities { get; } Property Value Type Description PinCapability [] Header Gets the pin's header (physical board) location. Declaration public GpioHeader Header { get; } Property Value Type Description GpioHeader HeaderPinNumber Gets or the physical header (physical board) pin number. Declaration public int HeaderPinNumber { get; } Property Value Type Description Int32 InputPullMode This sets or gets the pull-up or pull-down resistor mode on the pin, which should be set as an input. Unlike the Arduino, the BCM2835 has both pull-up an down internal resistors. The parameter pud should be; PUD_OFF, (no pull up/down), PUD_DOWN (pull to ground) or PUD_UP (pull to 3.3v) The internal pull up/down resistors have a value of approximately 50KΩ on the Raspberry Pi. Declaration public GpioPinResistorPullMode InputPullMode { get; set; } Property Value Type Description GpioPinResistorPullMode InterruptCallback Gets the interrupt callback. Returns null if no interrupt has been registered. Declaration public InterruptServiceRoutineCallback InterruptCallback { get; } Property Value Type Description InterruptServiceRoutineCallback InterruptEdgeDetection Gets the interrupt edge detection mode. Declaration public EdgeDetection InterruptEdgeDetection { get; } Property Value Type Description EdgeDetection IsInSoftPwmMode Gets a value indicating whether this pin is in software based PWM mode. Declaration public bool IsInSoftPwmMode { get; } Property Value Type Description Boolean true if this instance is in soft PWM mode; otherwise, false . IsInSoftToneMode Gets a value indicating whether this instance is in software based tone generator mode. Declaration public bool IsInSoftToneMode { get; } Property Value Type Description Boolean true if this instance is in soft tone mode; otherwise, false . Name Gets the friendly name of the pin. Declaration public string Name { get; } Property Value Type Description String PinMode Gets or sets the pin operating mode. Declaration public GpioPinDriveMode PinMode { get; set; } Property Value Type Description GpioPinDriveMode The pin mode. Exceptions Type Condition NotSupportedException Thrown when a pin does not support the given operation mode. PinNumber Gets or sets the Wiring Pi pin number as an integer. Declaration public int PinNumber { get; } Property Value Type Description Int32 PwmClockDivisor Gets or sets the PWM clock divisor. Declaration public int PwmClockDivisor { get; set; } Property Value Type Description Int32 The PWM clock divisor. Exceptions Type Condition InvalidOperationException When pin mode is not set to PWM output PwmMode The PWM generator can run in 2 modes – “balanced” and “mark:space”. The mark:space mode is traditional, however the default mode in the Pi is “balanced”. Declaration public PwmMode PwmMode { get; set; } Property Value Type Description PwmMode The PWM mode. Exceptions Type Condition InvalidOperationException When pin mode is not set a Pwn output PwmRange This sets the range register in the PWM generator. The default is 1024. Declaration public uint PwmRange { get; set; } Property Value Type Description UInt32 The PWM range. Exceptions Type Condition InvalidOperationException When pin mode is not set to PWM output PwmRegister Gets or sets the PWM register. Values should be between 0 and 1024 Declaration public int PwmRegister { get; set; } Property Value Type Description Int32 The PWM register. SoftPwmRange Gets the software PWM range used upon starting the PWM. Declaration public int SoftPwmRange { get; } Property Value Type Description Int32 SoftPwmValue Gets or sets the software PWM value on the pin. Declaration public int SoftPwmValue { get; set; } Property Value Type Description Int32 The soft PWM value. Exceptions Type Condition InvalidOperationException StartSoftPwm SoftToneFrequency Gets or sets the soft tone frequency. 0 to 5000 Hz is typical Declaration public int SoftToneFrequency { get; set; } Property Value Type Description Int32 The soft tone frequency. Exceptions Type Condition InvalidOperationException When soft tones cannot be initialized on the pin WiringPiPinNumber Gets the WiringPi Pin number Declaration public WiringPiPin WiringPiPinNumber { get; } Property Value Type Description WiringPiPin Methods Read() Reads the digital value on the pin as a boolean value. Declaration public bool Read() Returns Type Description Boolean The state of the pin ReadAsync() Reads the digital value on the pin as a boolean value. Declaration public Task<bool> ReadAsync() Returns Type Description Task < Boolean > The state of the pin ReadLevel() Reads the analog value on the pin. This returns the value read on the supplied analog input pin. You will need to register additional analog modules to enable this function for devices such as the Gertboard, quick2Wire analog board, etc. Declaration public int ReadLevel() Returns Type Description Int32 The analog level Exceptions Type Condition InvalidOperationException When the pin mode is not configured as an input. ReadLevelAsync() Reads the analog value on the pin. This returns the value read on the supplied analog input pin. You will need to register additional analog modules to enable this function for devices such as the Gertboard, quick2Wire analog board, etc. Declaration public Task<int> ReadLevelAsync() Returns Type Description Task < Int32 > The analog level ReadValue() Reads the digital value on the pin as a High or Low value. Declaration public GpioPinValue ReadValue() Returns Type Description GpioPinValue The state of the pin ReadValueAsync() Reads the digital value on the pin as a High or Low value. Declaration public Task<GpioPinValue> ReadValueAsync() Returns Type Description Task < GpioPinValue > The state of the pin RegisterInterruptCallback(EdgeDetection, InterruptServiceRoutineCallback) Registers the interrupt callback on the pin. Pin mode has to be set to Input. Declaration public void RegisterInterruptCallback(EdgeDetection edgeDetection, InterruptServiceRoutineCallback callback) Parameters Type Name Description EdgeDetection edgeDetection The edge detection. InterruptServiceRoutineCallback callback The callback. Exceptions Type Condition ArgumentException callback InvalidOperationException An interrupt callback was already registered. or RegisterInterruptCallback StartSoftPwm(Int32, Int32) Starts the software based PWM on this pin. Declaration public void StartSoftPwm(int value, int range) Parameters Type Name Description Int32 value The value. Int32 range The range. Exceptions Type Condition NotSupportedException When the pin does not suppoert PWM InvalidOperationException StartSoftPwm or WaitForValue(GpioPinValue, Int32) Wait for specific pin status Declaration public bool WaitForValue(GpioPinValue status, int timeOutMillisecond) Parameters Type Name Description GpioPinValue status status to check Int32 timeOutMillisecond timeout to reach status Returns Type Description Boolean true/false Write(Boolean) Writes the specified bit value. This method performs a digital write Declaration public void Write(bool value) Parameters Type Name Description Boolean value if set to true [value]. Write(Int32) Writes the specified value. 0 for low, any other value for high This method performs a digital write Declaration public void Write(int value) Parameters Type Name Description Int32 value The value. Write(GpioPinValue) Writes the specified pin value. This method performs a digital write Declaration public void Write(GpioPinValue value) Parameters Type Name Description GpioPinValue value The value. WriteAsync(Boolean) Writes the specified bit value. This method performs a digital write Declaration public Task WriteAsync(bool value) Parameters Type Name Description Boolean value The value. Returns Type Description Task The awaitable task WriteAsync(Int32) Writes the specified value. 0 for low, any other value for high This method performs a digital write Declaration public Task WriteAsync(int value) Parameters Type Name Description Int32 value The value. Returns Type Description Task The awaitable task WriteAsync(GpioPinValue) Writes the value asynchronously. Declaration public Task WriteAsync(GpioPinValue value) Parameters Type Name Description GpioPinValue value The value. Returns Type Description Task The awaitable task WriteLevel(Int32) Writes the specified value as an analog level. You will need to register additional analog modules to enable this function for devices such as the Gertboard. Declaration public void WriteLevel(int value) Parameters Type Name Description Int32 value The value. WriteLevelAsync(Int32) Writes the specified value as an analog level. You will need to register additional analog modules to enable this function for devices such as the Gertboard. Declaration public Task WriteLevelAsync(int value) Parameters Type Name Description Int32 value The value. Returns Type Description Task The awaitable task Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Gpio.EdgeDetection.html": {
    "href": "api/Unosquare.RaspberryIO.Gpio.EdgeDetection.html",
    "title": "Enum EdgeDetection | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Enum EdgeDetection Defines the different edge detection modes for pin interrupts Namespace : Unosquare.RaspberryIO.Gpio Syntax public enum EdgeDetection Fields Name Description ExternalSetup Assumes edge detection was already setup externally FallingEdge Falling Edge RisingAndFallingEdges Both, rising and falling edges RisingEdge Rising edge Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Computer.html": {
    "href": "api/Unosquare.RaspberryIO.Computer.html",
    "title": "Namespace Unosquare.RaspberryIO.Computer | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Namespace Unosquare.RaspberryIO.Computer Classes DsiDisplay The Official Raspberry Pi 7-inch touch display from the foundation Some docs available here: http://forums.pimoroni.com/t/official-7-raspberry-pi-touch-screen-faq/959 NetworkAdapterInfo Represents a Network Adapter NetworkSettings Represents the network information OsInfo Represents the OS Information SystemInfo http://raspberry-pi-guide.readthedocs.io/en/latest/system.html WirelessNetworkInfo Represents a wireless network information Enums PiVersion Defines the board revision codes of the different versions of the Raspberry Pi http://www.raspberrypi-spy.co.uk/2012/09/checking-your-raspberry-pi-board-version/ Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Computer.PiVersion.html": {
    "href": "api/Unosquare.RaspberryIO.Computer.PiVersion.html",
    "title": "Enum PiVersion | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Enum PiVersion Defines the board revision codes of the different versions of the Raspberry Pi http://www.raspberrypi-spy.co.uk/2012/09/checking-your-raspberry-pi-board-version/ Namespace : Unosquare.RaspberryIO.Computer Syntax public enum PiVersion Fields Name Description ComputeModule0x11 The compute module0x11 ComputeModule0x14 The compute module0x14 ModelAPlus0x12 The model a plus0x12 ModelAPlus0x15 The model a plus0x15 ModelAx07 The model ax07 ModelAx08 The model ax08 ModelAx09 The model ax09 ModelBPlus0x10 The model b plus0x10 ModelBPlus0x13 The model b plus0x13 ModelBRev1 The model b rev1 ModelBRev1ECN0001 The model b rev1 ec N0001 ModelBRev2x04 The model b rev2x04 ModelBRev2x05 The model b rev2x05 ModelBRev2x06 The model b rev2x06 ModelBRev2x0d The model b rev2x0d ModelBRev2x0e The model b rev2x0e ModelBRev2x0f The model b rev2x0f Pi2ModelB1v1Embest The pi2 model B1V1 embest Pi2ModelB1v1Sony The pi2 model B1V1 sony Pi2ModelB1v2 The pi2 model B1V2 Pi3ModelBEmbest The pi3 model b embest Pi3ModelBSony The pi3 model b sony PiZero1v2 The pi zero1v2 PiZero1v3 The pi zero1v3 Unknown The unknown version Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Computer.OsInfo.html": {
    "href": "api/Unosquare.RaspberryIO.Computer.OsInfo.html",
    "title": "Class OsInfo | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Class OsInfo Represents the OS Information Inheritance Object OsInfo Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.RaspberryIO.Computer Syntax public class OsInfo Properties DomainName Domain name Declaration public string DomainName { get; set; } Property Value Type Description String Machine Hardware level Declaration public string Machine { get; set; } Property Value Type Description String NodeName Node name Declaration public string NodeName { get; set; } Property Value Type Description String Release Release level Declaration public string Release { get; set; } Property Value Type Description String SysName System name Declaration public string SysName { get; set; } Property Value Type Description String Version Version level Declaration public string Version { get; set; } Property Value Type Description String Methods ToString() Returns a String that represents this instance. Declaration public override string ToString() Returns Type Description String A String that represents this instance. Overrides Object.ToString() Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Computer.DsiDisplay.html": {
    "href": "api/Unosquare.RaspberryIO.Computer.DsiDisplay.html",
    "title": "Class DsiDisplay | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Class DsiDisplay The Official Raspberry Pi 7-inch touch display from the foundation Some docs available here: http://forums.pimoroni.com/t/official-7-raspberry-pi-touch-screen-faq/959 Inheritance Object DsiDisplay Namespace : Unosquare.RaspberryIO.Computer Syntax public class DsiDisplay : SingletonBase<DsiDisplay> Properties Brightness Gets or sets the brightness of the DSI display via filesystem. Declaration public byte Brightness { get; set; } Property Value Type Description Byte The brightness. IsBacklightOn Gets or sets a value indicating whether the backlight of the DSI display on. This operation is performed via the file system Declaration public bool IsBacklightOn { get; set; } Property Value Type Description Boolean true if this instance is backlight on; otherwise, false . IsPresent Gets a value indicating whether the Pi Foundation Display files are present. Declaration public bool IsPresent { get; } Property Value Type Description Boolean true if this instance is present; otherwise, false . Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Camera.html": {
    "href": "api/Unosquare.RaspberryIO.Camera.html",
    "title": "Namespace Unosquare.RaspberryIO.Camera | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Namespace Unosquare.RaspberryIO.Camera Classes CameraColor A simple RGB color class to represent colors in RGB and YUV colorspaces. CameraController The Raspberry Pi's camera controller wrapping raspistill and raspivid programs. This class is a singleton CameraSettingsBase A base class to implement raspistill and raspivid wrappers Full documentation available at https://www.raspberrypi.org/documentation/raspbian/applications/camera.md CameraStillSettings Defines a wrapper for the raspistill program and its settings (command-line arguments) CameraVideoSettings Represents the raspivid camera settings for video capture functionality Structs CameraRect Defines the Raspberry Pi camera's sensor ROI (Region of Interest) Enums CameraAnnotation Defines the bit-wise mask flags for the available annotation elements for the Raspberry Pi's camera module CameraDynamicRangeCompensation Defines the different DRC (Dynamic Range Compensation) modes for the Raspberry Pi's camera module Helpful for low light photos CameraExposureMode Defines the different exposure modes for the Raspberry Pi's camera module CameraH264Profile Defines the different H.264 encoding profiles to be used when capturing video. CameraImageEffect Defines the available image effects for the Raspberry Pi's camera module CameraImageEncodingFormat Defines the available encoding formats for the Raspberry Pi camera module CameraImageRotation Defines the different image rotation modes for the Raspberry Pi's camera module CameraMeteringMode Defines the different metering modes for the Raspberry Pi's camera module CameraWhiteBalanceMode Defines the different AWB (Auto White Balance) modes for the Raspberry Pi's camera module Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Camera.CameraVideoSettings.html": {
    "href": "api/Unosquare.RaspberryIO.Camera.CameraVideoSettings.html",
    "title": "Class CameraVideoSettings | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Class CameraVideoSettings Represents the raspivid camera settings for video capture functionality Inheritance Object CameraSettingsBase CameraVideoSettings Inherited Members CameraSettingsBase.Ci CameraSettingsBase.CaptureTimeoutMilliseconds CameraSettingsBase.CaptureDisplayPreview CameraSettingsBase.CaptureDisplayPreviewInFullScreen CameraSettingsBase.CaptureVideoStabilizationEnabled CameraSettingsBase.CaptureDisplayPreviewOpacity CameraSettingsBase.CaptureSensorRoi CameraSettingsBase.CaptureShutterSpeedMicroseconds CameraSettingsBase.CaptureExposure CameraSettingsBase.CaptureExposureCompensation CameraSettingsBase.CaptureMeteringMode CameraSettingsBase.CaptureWhiteBalanceControl CameraSettingsBase.CaptureWhiteBalanceGainBlue CameraSettingsBase.CaptureWhiteBalanceGainRed CameraSettingsBase.CaptureDynamicRangeCompensation CameraSettingsBase.CaptureWidth CameraSettingsBase.CaptureHeight CameraSettingsBase.ImageSharpness CameraSettingsBase.ImageContrast CameraSettingsBase.ImageBrightness CameraSettingsBase.ImageSaturation CameraSettingsBase.ImageIso CameraSettingsBase.ImageEffect CameraSettingsBase.ImageColorEffectU CameraSettingsBase.ImageColorEffectV CameraSettingsBase.ImageRotation CameraSettingsBase.ImageFlipHorizontally CameraSettingsBase.ImageFlipVertically CameraSettingsBase.ImageAnnotations CameraSettingsBase.ImageAnnotationsText CameraSettingsBase.ImageAnnotationFontSize CameraSettingsBase.ImageAnnotationFontColor CameraSettingsBase.ImageAnnotationBackground Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.RaspberryIO.Camera Syntax public class CameraVideoSettings : CameraSettingsBase Properties CaptureBitrate Use bits per second, so 10Mbits/s would be -b 10000000. For H264, 1080p30 a high quality bitrate would be 15Mbits/s or more. Maximum bitrate is 25Mbits/s (-b 25000000), but much over 17Mbits/s won't show noticeable improvement at 1080p30. Default -1 Declaration public int CaptureBitrate { get; set; } Property Value Type Description Int32 CaptureDisplayPreviewEncoded Switch on an option to display the preview after compression. This will show any compression artefacts in the preview window. In normal operation, the preview will show the camera output prior to being compressed. This option is not guaranteed to work in future releases. Declaration public bool CaptureDisplayPreviewEncoded { get; set; } Property Value Type Description Boolean true if [capture display preview encoded]; otherwise, false . CaptureFramerate Gets or sets the framerate. Default 25, range 2 to 30 Declaration public int CaptureFramerate { get; set; } Property Value Type Description Int32 CaptureInterleaveHeaders Forces the stream to include PPS and SPS headers on every I-frame. Needed for certain streaming cases e.g. Apple HLS. These headers are small, so don't greatly increase the file size. Declaration public bool CaptureInterleaveHeaders { get; set; } Property Value Type Description Boolean true if [interleave headers]; otherwise, false . CaptureKeyframeRate Sets the intra refresh period (GoP) rate for the recorded video. H264 video uses a complete frame (I-frame) every intra refresh period, from which subsequent frames are based. This option specifies the number of frames between each I-frame. Larger numbers here will reduce the size of the resulting video, and smaller numbers make the stream less error-prone. Declaration public int CaptureKeyframeRate { get; set; } Property Value Type Description Int32 CaptureProfile Gets or sets the profile. Sets the H264 profile to be used for the encoding. Default is Main mode Declaration public CameraH264Profile CaptureProfile { get; set; } Property Value Type Description CameraH264Profile CaptureQuantisation Sets the initial quantisation parameter for the stream. Varies from approximately 10 to 40, and will greatly affect the quality of the recording. Higher values reduce quality and decrease file size. Combine this setting with a bitrate of 0 to set a completely variable bitrate. Declaration public int CaptureQuantisation { get; set; } Property Value Type Description Int32 CommandName Gets the command file executable. Declaration public override string CommandName { get; } Property Value Type Description String Overrides CameraSettingsBase.CommandName Methods CreateProcessArguments() Creates the process arguments. Declaration public override string CreateProcessArguments() Returns Type Description String The string that represents the process arguments Overrides CameraSettingsBase.CreateProcessArguments() See Also CameraSettingsBase Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Camera.CameraSettingsBase.html": {
    "href": "api/Unosquare.RaspberryIO.Camera.CameraSettingsBase.html",
    "title": "Class CameraSettingsBase | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Class CameraSettingsBase A base class to implement raspistill and raspivid wrappers Full documentation available at https://www.raspberrypi.org/documentation/raspbian/applications/camera.md Inheritance Object CameraSettingsBase CameraStillSettings CameraVideoSettings Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.RaspberryIO.Camera Syntax public abstract class CameraSettingsBase Fields Ci The Invariant Culture shorthand Declaration protected static readonly CultureInfo Ci Field Value Type Description CultureInfo Properties CaptureDisplayPreview Gets or sets a value indicating whether or not to show a preview window on the screen Declaration public bool CaptureDisplayPreview { get; set; } Property Value Type Description Boolean CaptureDisplayPreviewInFullScreen Gets or sets a value indicating whether a preview window is shown in full screen mode if enabled Declaration public bool CaptureDisplayPreviewInFullScreen { get; set; } Property Value Type Description Boolean CaptureDisplayPreviewOpacity Gets or sets the display preview opacity only if the display preview property is enabled. Declaration public byte CaptureDisplayPreviewOpacity { get; set; } Property Value Type Description Byte CaptureDynamicRangeCompensation Gets or sets the dynamic range compensation. DRC changes the images by increasing the range of dark areas, and decreasing the brighter areas. This can improve the image in low light areas. Declaration public CameraDynamicRangeCompensation CaptureDynamicRangeCompensation { get; set; } Property Value Type Description CameraDynamicRangeCompensation CaptureExposure Gets or sets the exposure mode. Declaration public CameraExposureMode CaptureExposure { get; set; } Property Value Type Description CameraExposureMode CaptureExposureCompensation Gets or sets the picture EV compensation. Default is 0, Range is -10 to 10 Camera exposure compensation is commonly stated in terms of EV units; 1 EV is equal to one exposure step (or stop), corresponding to a doubling of exposure. Exposure can be adjusted by changing either the lens f-number or the exposure time; which one is changed usually depends on the camera's exposure mode. Declaration public int CaptureExposureCompensation { get; set; } Property Value Type Description Int32 CaptureHeight Gets or sets the height of the picture to take. Less than or equal to 0 in either width or height means maximum resolution available. Declaration public int CaptureHeight { get; set; } Property Value Type Description Int32 CaptureMeteringMode Gets or sets the capture metering mode. Declaration public CameraMeteringMode CaptureMeteringMode { get; set; } Property Value Type Description CameraMeteringMode CaptureSensorRoi Gets or sets the capture sensor region of interest in relative coordinates. Declaration public CameraRect CaptureSensorRoi { get; set; } Property Value Type Description CameraRect CaptureShutterSpeedMicroseconds Gets or sets the capture shutter speed in microseconds. Default -1, Range 0 to 6000000 (equivalent to 6 seconds) Declaration public int CaptureShutterSpeedMicroseconds { get; set; } Property Value Type Description Int32 CaptureTimeoutMilliseconds Gets or sets the timeout milliseconds. Default value is 5000 Recommended value is at least 300 in order to let the light collectors open Declaration public int CaptureTimeoutMilliseconds { get; set; } Property Value Type Description Int32 CaptureVideoStabilizationEnabled Gets or sets a value indicating whether video stabilization should be enabled. Declaration public bool CaptureVideoStabilizationEnabled { get; set; } Property Value Type Description Boolean CaptureWhiteBalanceControl Gets or sets the automatic white balance mode. By default it is set to Auto Declaration public CameraWhiteBalanceMode CaptureWhiteBalanceControl { get; set; } Property Value Type Description CameraWhiteBalanceMode CaptureWhiteBalanceGainBlue Gets or sets the capture white balance gain on the blue channel. Example: 1.25 Only takes effect if White balance control is set to off. Default is 0 Declaration public decimal CaptureWhiteBalanceGainBlue { get; set; } Property Value Type Description Decimal CaptureWhiteBalanceGainRed Gets or sets the capture white balance gain on the red channel. Example: 1.75 Only takes effect if White balance control is set to off. Default is 0 Declaration public decimal CaptureWhiteBalanceGainRed { get; set; } Property Value Type Description Decimal CaptureWidth Gets or sets the width of the picture to take. Less than or equal to 0 in either width or height means maximum resolution available. Declaration public int CaptureWidth { get; set; } Property Value Type Description Int32 CommandName Gets the command file executable. Declaration public abstract string CommandName { get; } Property Value Type Description String ImageAnnotationBackground Gets or sets the background color for text annotations. Declaration public CameraColor ImageAnnotationBackground { get; set; } Property Value Type Description CameraColor The image annotation background. ImageAnnotationFontColor Gets or sets the color of the text annotations. Declaration public CameraColor ImageAnnotationFontColor { get; set; } Property Value Type Description CameraColor The color of the image annotation font. ImageAnnotationFontSize Gets or sets the font size of the text annotations Default is -1, range is 6 to 160 Declaration public int ImageAnnotationFontSize { get; set; } Property Value Type Description Int32 ImageAnnotations Gets or sets the image annotations using a bitmask (or flags) notation. Apply a bitwise OR to the enumeration to include multiple annotations Declaration public CameraAnnotation ImageAnnotations { get; set; } Property Value Type Description CameraAnnotation ImageAnnotationsText Gets or sets the image annotations text. Text may include date/time placeholders by using the '%' character, as used by strftime. Example: ABC %Y-%m-%d %X will output ABC 2015-10-28 20:09:33 Declaration public string ImageAnnotationsText { get; set; } Property Value Type Description String ImageBrightness Gets or sets the picture brightness. Default is 50, Range form 0 to 100 Declaration public int ImageBrightness { get; set; } Property Value Type Description Int32 ImageColorEffectU Gets or sets the color effect U coordinates. Default is -1, Range is 0 to 255 128:128 should be effectively a monochrome image. Declaration public int ImageColorEffectU { get; set; } Property Value Type Description Int32 ImageColorEffectV Gets or sets the color effect V coordinates. Default is -1, Range is 0 to 255 128:128 should be effectively a monochrome image. Declaration public int ImageColorEffectV { get; set; } Property Value Type Description Int32 ImageContrast Gets or sets the picture contrast. Default is 0, Range form -100 to 100 Declaration public int ImageContrast { get; set; } Property Value Type Description Int32 ImageEffect Gets or sets the image capture effect to be applied. Declaration public CameraImageEffect ImageEffect { get; set; } Property Value Type Description CameraImageEffect ImageFlipHorizontally Gets or sets a value indicating whether the image should be flipped horizontally. Declaration public bool ImageFlipHorizontally { get; set; } Property Value Type Description Boolean ImageFlipVertically Gets or sets a value indicating whether the image should be flipped vertically. Declaration public bool ImageFlipVertically { get; set; } Property Value Type Description Boolean ImageIso Gets or sets the picture ISO. Default is -1 Range is 100 to 800 The higher the value, the more light the sensor absorbs Declaration public int ImageIso { get; set; } Property Value Type Description Int32 ImageRotation Gets or sets the image rotation. Default is no rotation Declaration public CameraImageRotation ImageRotation { get; set; } Property Value Type Description CameraImageRotation ImageSaturation Gets or sets the picture saturation. Default is 0, Range form -100 to 100 Declaration public int ImageSaturation { get; set; } Property Value Type Description Int32 ImageSharpness Gets or sets the picture sharpness. Default is 0, Range form -100 to 100 Declaration public int ImageSharpness { get; set; } Property Value Type Description Int32 Methods CreateProcessArguments() Creates the process arguments. Declaration public virtual string CreateProcessArguments() Returns Type Description String The string that represents the process arguments Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Camera.CameraMeteringMode.html": {
    "href": "api/Unosquare.RaspberryIO.Camera.CameraMeteringMode.html",
    "title": "Enum CameraMeteringMode | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Enum CameraMeteringMode Defines the different metering modes for the Raspberry Pi's camera module Namespace : Unosquare.RaspberryIO.Camera Syntax public enum CameraMeteringMode Fields Name Description Average The average Backlit The backlit Matrix The matrix Spot The spot Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Camera.CameraImageEncodingFormat.html": {
    "href": "api/Unosquare.RaspberryIO.Camera.CameraImageEncodingFormat.html",
    "title": "Enum CameraImageEncodingFormat | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Enum CameraImageEncodingFormat Defines the available encoding formats for the Raspberry Pi camera module Namespace : Unosquare.RaspberryIO.Camera Syntax public enum CameraImageEncodingFormat Fields Name Description Bmp The BMP Gif The GIF Jpg The JPG Png The PNG Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Camera.CameraH264Profile.html": {
    "href": "api/Unosquare.RaspberryIO.Camera.CameraH264Profile.html",
    "title": "Enum CameraH264Profile | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Enum CameraH264Profile Defines the different H.264 encoding profiles to be used when capturing video. Namespace : Unosquare.RaspberryIO.Camera Syntax public enum CameraH264Profile Fields Name Description Baseline BP: Primarily for lower-cost applications with limited computing resources, this profile is used widely in videoconferencing and mobile applications. High HiP: The primary profile for broadcast and disc storage applications, particularly for high-definition television applications (this is the profile adopted into HD DVD and Blu-ray Disc, for example). Main MP: Originally intended as the mainstream consumer profile for broadcast and storage applications, the importance of this profile faded when the High profile was developed for those applications. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Camera.CameraDynamicRangeCompensation.html": {
    "href": "api/Unosquare.RaspberryIO.Camera.CameraDynamicRangeCompensation.html",
    "title": "Enum CameraDynamicRangeCompensation | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Enum CameraDynamicRangeCompensation Defines the different DRC (Dynamic Range Compensation) modes for the Raspberry Pi's camera module Helpful for low light photos Namespace : Unosquare.RaspberryIO.Camera Syntax public enum CameraDynamicRangeCompensation Fields Name Description High The high Low The low Medium The medium Off The off setting Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Camera.CameraColor.html": {
    "href": "api/Unosquare.RaspberryIO.Camera.CameraColor.html",
    "title": "Class CameraColor | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Class CameraColor A simple RGB color class to represent colors in RGB and YUV colorspaces. Inheritance Object CameraColor Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.RaspberryIO.Camera Syntax public class CameraColor Constructors CameraColor(Int32, Int32, Int32) Initializes a new instance of the CameraColor class. Declaration public CameraColor(int r, int g, int b) Parameters Type Name Description Int32 r The red. Int32 g The green. Int32 b The blue. CameraColor(Int32, Int32, Int32, String) Initializes a new instance of the CameraColor class. Declaration public CameraColor(int r, int g, int b, string name) Parameters Type Name Description Int32 r The red. Int32 g The green. Int32 b The blue. String name The well-known color name. Properties B Gets the blue byte. Declaration public byte B { get; } Property Value Type Description Byte Black Gets the predefined black color. Declaration public static CameraColor Black { get; } Property Value Type Description CameraColor Blue Gets the predefined blue color. Declaration public static CameraColor Blue { get; } Property Value Type Description CameraColor G Gets the green byte. Declaration public byte G { get; } Property Value Type Description Byte Green Gets the predefined green color. Declaration public static CameraColor Green { get; } Property Value Type Description CameraColor Name Gets the well-known color name. Declaration public string Name { get; } Property Value Type Description String R Gets the red byte. Declaration public byte R { get; } Property Value Type Description Byte Red Gets the predefined red color. Declaration public static CameraColor Red { get; } Property Value Type Description CameraColor RGB Gets the RGB byte array (3 bytes). Declaration public byte[] RGB { get; } Property Value Type Description Byte [] White Gets the predefined white color. Declaration public static CameraColor White { get; } Property Value Type Description CameraColor YUV Gets the YUV byte array (3 bytes). Declaration public byte[] YUV { get; } Property Value Type Description Byte [] Methods ToRgbHex(Boolean) Returns a hexadecimal representation of the RGB byte array. Preceded by 0x and all in lowercase Declaration public string ToRgbHex(bool reverse) Parameters Type Name Description Boolean reverse if set to true [reverse]. Returns Type Description String A string ToYuvHex(Boolean) Returns a hexadecimal representation of the YUV byte array. Preceded by 0x and all in lowercase Declaration public string ToYuvHex(bool reverse) Parameters Type Name Description Boolean reverse if set to true [reverse]. Returns Type Description String A string Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Camera.CameraAnnotation.html": {
    "href": "api/Unosquare.RaspberryIO.Camera.CameraAnnotation.html",
    "title": "Enum CameraAnnotation | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Enum CameraAnnotation Defines the bit-wise mask flags for the available annotation elements for the Raspberry Pi's camera module Namespace : Unosquare.RaspberryIO.Camera Syntax [Flags] public enum CameraAnnotation Fields Name Description CafSettings The caf settings Date The date FrameNumber The frame number GainSettings The gain settings LensSettings The lens settings MotionSettings The motion settings None The none ShutterSettings The shutter settings SolidBackground The solid background Time The time Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "README.html": {
    "href": "README.html",
    "title": "RaspberryIO - Pi's hardware access from .NET | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "RaspberryIO - Pi's hardware access from .NET ⭐ Please star this project if you find it useful! The Raspberry Pi's IO Functionality in an easy-to-use API for .NET (Mono/.NET Core). Our mission is to make .NET a first-class citizen in the Python-centric community of Raspberry Pi developers. Table of contents Features Peripherals Installation Running the latest version of Mono For Debian Wheezy For Debian Stretch Handy Notes Running .NET Core 2 Run the app on the raspberry The Camera Module Capturing Images Capturing Video Obtaining Board and System Information Using the GPIO Pins Pin Information Digital Read and Write Analog (Level) Read and Write Hardware PWM Software PWM Tone Generation Interrupts and Callbacks Using the SPI Bus I2C to connect ICs Timing and Threading Serial Ports (UART) Similar Projects Features This library enables developers to use the various Raspberry Pi's hardware modules: Pi.Camera Provides access to the official Raspberry Pi Camera module. Pi.Info Provides information on this Raspberry Pi's CPU and form factor. Pi.Gpio Provides access to the Raspberry Pi's GPIO as a collection of GPIO Pins. Pi.Spi Provides access to the 2-channel SPI bus. Pi.I2c Provides access to the functionality of the i2c bus. Pi.Timing Provides access to The PI's Timing and threading API. To run the program mono myprogram.exe in order to work correctly. You no longer require running as root. This library depends on the wonderful WiringPi library available here . You do not need to install this library yourself. The RaspberryIO assembly will automatically extract the compiled binary of the library in the same path as the entry assembly. Peripherals We offer an additional package with helpful classes to use peripherals, many of them are from pull requests from our contributors. The current set of peripherals supported are: Infrared Sensor HX-1838 Led Strip APA-102C NFC/RFID Controller MFRC-522 Temperature Sensor AM-2302 Generic Button Installation Install basic Raspberry.IO package: PM> Install-Package Unosquare.Raspberry.IO Install Raspberry.IO Peripherals package: PM> Install-Package Unosquare.RaspberryIO.Peripherals Running the latest version of Mono It is recommended that you install the latest available release of Mono because what is available in the Raspbian repo is quite old (3.X). These commands were tested using Raspbian Jessie. The version of Mono that is installed at the time of this writing is: Mono JIT compiler version 5.4.1.6 (tarball Wed Nov 8 21:42:16 UTC 2017) The commands to get Mono installed are the following: For Debian Wheezy sudo apt-get update sudo apt-get upgrade sudo apt-get install mono-complete sudo apt-get install dirmngr sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF echo \"deb http://download.mono-project.com/repo/debian wheezy main\" | sudo tee /etc/apt/sources.list.d/mono-xamarin.list sudo apt-get update sudo apt-get dist-upgrade For Debian Stretch sudo apt-get update sudo apt-get upgrade sudo apt-get install mono-complete sudo apt-get install dirmngr sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF echo \"deb http://download.mono-project.com/repo/debian stretch main\" | sudo tee /etc/apt/sources.list.d/mono-xamarin.list sudo apt-get update sudo apt-get dist-upgrade Now, verify your version of Mono by running mono --version . Version 4.6 and above should be good enough. Handy Notes In order to setup Wi-Fi, run: sudo nano /etc/wpa_supplicant/wpa_supplicant.conf A good file should look like this: country=US ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 network={ ssid=\"your_real_wifi_ssid\" scan_ssid=1 psk=\"your_real_password\" } And then restart the services as follows: sudo systemctl daemon-reload sudo systemctl restart dhcpcd You can also configure most boot options by running: sudo raspi-config Running .NET Core 2.1 This project can also run in .NET Core 2.1. To install please execute the following commands: $ sudo apt-get -y update $ sudo apt-get -y install libunwind8 gettext $ wget https://dotnetcli.blob.core.windows.net/dotnet/Sdk/2.1.300-rc1-008673/dotnet-sdk-2.1.300-rc1-008673-linux-arm.tar.gz $ wget https://dotnetcli.blob.core.windows.net/dotnet/aspnetcore/Runtime/2.1.0-rc1-final/aspnetcore-runtime-2.1.0-rc1-final-linux-arm.tar.gz $ sudo mkdir /opt/dotnet $ sudo tar -xvf dotnet-sdk-2.1.300-rc1-008673-linux-arm.tar.gz -C /opt/dotnet/ $ sudo tar -xvf aspnetcore-runtime-2.1.0-rc1-final-linux-arm.tar.gz -C /opt/dotnet/ $ sudo ln -s /opt/dotnet/dotnet /usr/local/bin $ dotnet --info Run the app on the raspberry You need to publish the project and you can accomplish this by using dotnet-sshdeploy but first, you must edit these properties inside the Playground's csproj file in order to establish an ssh connection with your raspberry <SshDeployHost>172.16.17.54</SshDeployHost> <SshDeployTargetPath>/home/pi/Playground</SshDeployTargetPath> <SshDeployUsername>pi</SshDeployUsername> <SshDeployPassword>raspberry</SshDeployPassword> Install dotnet-sshdeploy as a global tool by running $ dotnet tool install -g dotnet-sshdeploy Execute dotnet-sshdeploy push in the same folder where Unosquare.RaspberryIO.Playground.csproj resides and if everything executes correctly you should see an output like this: SSH Deployment Tool [Version 0.3.1.0] (c)2015 - 2017 Unosquare SA de CV. All Rights Reserved. For additional help, please visit https://github.com/unosquare/sshdeploy Deploying... Configuration Debug Framework net452 Source Path C:\\raspberryio\\src\\Unosquare.RaspberryIO.Playground\\bin\\Debug\\net452\\publish Excluded Files .ready|.vshost.exe|.vshost.exe.config Target Address 192.16.17.54:22 Username pi Target Path /home/pi/Playground Clean Target NO Pre Deployment Post Deployment Connecting to host 192.16.17.54:22 via SSH. Connecting to host 192.16.17.54:22 via SFTP. Target Path '/home/pi/Playground' does not exist. -- Will attempt to create. Target Path '/home/pi/Playground' created successfully. Cleaning Target Path '/home/pi/Playground' Deploying 8 files. Finished deployment in 1.25 seconds. Completed. The default TargetFramework is net452 but you can change this by either modifying the RuntimeIdentifier property inside the csproj file or supplying it as a parameter like this dotnet-sshdeploy push -f netcoreapp2.0 . More information about dotnet-sshdeploy see this Give permissions to run the project ubuntu@ubuntu:~/publish$ sudo chmod u+x * Run the project ubuntu@ubuntu:~/publish$ ./Unosquare.RaspberryIO.Playground The Camera Module The Pi.Camera module uses raspivid and raspistill to access the camera so they must be installed in order for your program to work properly. raspistill arguments are specified in an instance of the CameraStillSettings class, while the raspivid arguments are specified in an instance of the CameraVideoSettings class. Capturing Images The Pi.Camera.CaptureImage* methods simply return an array of bytes containing the captured image. There are synchronous and asynchronous falvors of these methods so you can use the familiar async and await pattern to capture your images. All raspistill arguments (except for those that control user interaction such as -k ) are available via the CameraStillSettings . To start, create a new instance of the CameraStillSettings class and pass it on to your choice of the Pi.Camera.CaptureImage* methods. There are shortcut methods available that simply take a JPEG image at the given Width and Height. By default, the shortcut methods set the JPEG quality at 90%. Example using a shortcut method: static void TestCaptureImage() { var pictureBytes = Pi.Camera.CaptureImageJpeg(640, 480); var targetPath = \"/home/pi/picture.jpg\"; if (File.Exists(targetPath)) File.Delete(targetPath); File.WriteAllBytes(targetPath, pictureBytes); Console.WriteLine($\"Took picture -- Byte count: {pictureBytes.Length}\"); } Example using a CaptureImage method: // TODO: example code here Capturing Video Capturing video streams is somewhat different but it is still very easy to do. The concept behind it is to Open a video stream providing your own callback. When opening the stream Raspberry IO will spawn a separate thread and will not block the execution of your code, but it will continually call your callback method containing the bytes that are being read from the camera until the Close method is called or until the timeout is reached. Example of capturing a stream of H.264 video static void TestCaptureVideo() { // Setup our working variables var videoByteCount = 0; var videoEventCount = 0; var startTime = DateTime.UtcNow; // Configure video settings var videoSettings = new CameraVideoSettings() { CaptureTimeoutMilliseconds = 0, CaptureDisplayPreview = false, ImageFlipVertically = true, CaptureExposure = CameraExposureMode.Night, CaptureWidth = 1920, CaptureHeight = 1080 }; try { // Start the video recording Pi.Camera.OpenVideoStream(videoSettings, onDataCallback: (data) => { videoByteCount += data.Length; videoEventCount++; }, onExitCallback: null); // Wait for user interaction startTime = DateTime.UtcNow; Console.WriteLine(\"Press any key to stop reading the video stream . . .\"); Console.ReadKey(true); } catch (Exception ex) { Console.WriteLine($\"{ex.GetType()}: {ex.Message}\"); } finally { // Always close the video stream to ensure raspivid quits Pi.Camera.CloseVideoStream(); // Output the stats var megaBytesReceived = (videoByteCount / (1024f * 1024f)).ToString(\"0.000\"); var recordedSeconds = DateTime.UtcNow.Subtract(startTime).TotalSeconds.ToString(\"0.000\"); Console.WriteLine($\"Capture Stopped. Received {megaBytesReceived} Mbytes in {videoEventCount} callbacks in {recordedSeconds} seconds\"); } } Obtaining Board and System Information RaspberryIO contains useful utilities to obtain information about the board it is running on. You can simply call the Pi.Info.ToString() method to obtain a dump of all system properties as a single string , or you can use the individual properties such as Installed RAM, Processor Count, Raspberry Pi Version, Serial Number, etc. There's not a lot more to this. Please note Pi.Info depends on Wiring Pi , and the /proc/cpuinfo and /proc/meminfo files. Using the GPIO Pins Pin reference for the B plus (B+) - Header P1 BCM wPi Name Mode V L R V Mode Name wPi BCM 3.3v 01 02 5v 2 8 SDA.1 ALT0 1 03 04 5V 3 9 SCL.1 ALT0 1 05 06 0v 4 7 GPIO. 7 IN 1 07 08 1 ALT0 TxD 15 14 0v 09 10 1 ALT0 RxD 16 15 17 0 GPIO. 0 IN 0 11 12 0 IN GPIO. 1 1 18 27 2 GPIO. 2 IN 0 13 14 0v 22 3 GPIO. 3 IN 0 15 16 0 IN GPIO. 4 4 23 3.3v 17 18 0 IN GPIO. 5 5 24 10 12 MOSI IN 0 19 20 0v 9 13 MISO IN 0 21 22 0 IN GPIO. 6 6 25 11 14 SCLK IN 0 23 24 1 IN CE0 10 8 0v 25 26 1 IN CE1 11 7 0 30 SDA.0 IN 1 27 28 1 IN SCL.0 31 1 5 21 GPIO.21 IN 1 29 30 0v 6 22 GPIO.22 IN 1 31 32 0 IN GPIO.26 26 12 13 23 GPIO.23 IN 0 33 34 0v 19 24 GPIO.24 IN 0 35 36 0 IN GPIO.27 27 16 26 25 GPIO.25 IN 0 37 38 0 IN GPIO.28 28 20 0v 39 40 0 IN GPIO.29 29 21 But wait for a second, Where are Wiring Pi (wPi) pins 17 through 20? The above diagram shows the pins of GPIO Header P1. There is an additional GPIO header on the Pi called P5. More info available here In order to access the pins, use Pi.Gpio . The pins can have multiple behaviors and fortunately Pi.Gpio can be iterated, addressed by index, addressed by Wiring Pi pin number and provides the pins as publicly accessible properties. Here is an example of addressing the pins in all the various ways: public static void TestLedBlinking() { // Get a reference to the pin you need to use. // All 3 methods below are exactly equivalent var blinkingPin = Pi.Gpio[0]; blinkingPin = Pi.Gpio[WiringPiPin.Pin00]; blinkingPin = Pi.Gpio.Pin00; // Configure the pin as an output blinkingPin.PinMode = GpioPinDriveMode.Output; // perform writes to the pin by toggling the isOn variable var isOn = false; for (var i = 0; i < 20; i++) { isOn = !isOn; blinkingPin.Write(isOn); System.Threading.Thread.Sleep(500); } } Pin Information All pins have handy properties and methods that you can use to drive them. For example, you can examine the Capabilities property to find out which features are available on the pin. You can also use the PinMode property to get or set the operating mode of the pin. Please note that the value of the PinMode property is by default set to Input and it will return the last mode you set the property to. Digital Read and Write It is very easy to read and write values to the pins. In general, it is a 2-step process. Set the pin mode Read or write the bit value Reading the value of a pin example: Pi.Gpio.Pin02.PinMode = GpioPinDriveMode.Input; // The below lines are reoughly equivalent var isOn = Pi.Gpio.Pin02.Read(); // Reads as a boolean var pinValue = Pi.Gpio.Pin02.ReadValue(); // Reads as a GpioPinValue Writing to a pin example Pi.Gpio.Pin02.PinMode = GpioPinDriveMode.Output; // The below lines are reoughly equivalent Pi.Gpio.Pin02.Write(true); // Writes a boolean Pi.Gpio.Pin02.Write(GpioPinValue.High); // Writes a pin value Analog (Level) Read and Write TODO Hardware PWM TODO Software PWM TODO Tone Generation You can emit tones by using SoftToneFrequency. Example: // Get a reference to the pin var passiveBuzzer = Pi.Gpio[WiringPiPin.Pin01]; // Set the frequency to Alto Do (523Hz) passiveBuzzer.SoftToneFrequency = 523 // Wait 1 second System.Threading.Thread.Sleep(1000); // And stop passiveBuzzer.SoftToneFrequency = 0; Interrupts and Callbacks Register an Interrupt Callback example: using System; using Unosquare.RaspberryIO; using Unosquare.RaspberryIO.Gpio; class Program { // Define the implementation of the delegate; static void ISRCallback() { Console.WriteLine(\"Pin Activated...\"); } static void Main(string[] args) { Console.WriteLine(\"Gpio Interrupts\"); var pin = Pi.Gpio.Pin00; pin.PinMode = GpioPinDriveMode.Input; pin.RegisterInterruptCallback(EdgeDetection.FallingEdge, ISRCallback); Console.ReadKey(); } } Using the SPI Bus I really liked the following description from Neil's Log Book : The SPI (Serial Peripheral Interface) protocol behaves like a ring buffer so that whenever the master sends a byte to the slave, the slave sends a byte back to the master. The slave can use this behavior to return a status byte, a response to a previous byte, or null data (the master may choose to read the returned byte or ignore it). The bus operates on a 4-wire interface. RaspberryIO provides easy access to the 2 SPI channels available on the Raspberry. The functionality depends on Wiring Pi 's SPI library. Please note that you may need to issue the command gpio load spi before starting your application (or as a System.Diagnostics.Process when your application starts) if the SPI kernel drivers have not been loaded. In order to use an SPI channel you MUST always set the Channel0Frequency or Channel1Frequency (depending on the channel you want to use) before calling the SendReceive method. If the property is not set beforehand the SPI channel will fail initialization. See an example below: Example of using the SPI Bus Pi.Spi.Channel0Frequency = SpiChannel.MinFrequency; var request = System.Text.Encoding.ASCII.GetBytes(\"HELLO!\"); var response = Pi.Spi.Channel0.SendReceive(request); I2C to connect ICs The Inter IC Bus (I2C) is a cousin of the SPI bus but it is somewhat more complex and it does not work as a ring buffer like the SPI bus. It also connects all of its slave devices in series and depends on 2 lines only. There is a nice tutorial on setting up and using the I2C bus at Robot Electronics . From their site: The physical bus is just two wires, called SCL and SDA. SCL is the clock line. It is used to synchronize all data transfers over the I2C bus. SDA is the data line. The SCL & SDA lines are connected to all devices on the I2C bus. There needs to be a third wire which is just the ground or 0 volts. There may also be a 5volt wire is power is being distributed to the devices. Both SCL and SDA lines are \"open drain\" drivers. What this means is that the chip can drive its output low, but it cannot drive it high. For the line to be able to go high you must provide pull-up resistors to the 5v supply. There should be a resistor from the SCL line to the 5v line and another from the SDA line to the 5v line. You only need one set of pull-up resistors for the whole I2C bus, not for each device. RaspberryIO provides easy access to the I2C bus available on the Raspberry. The functionality depends on Wiring Pi 's I2C library. Please note that you may need to issue the command gpio load i2c before starting your application (or as a System.Diagnostics.Process when your application starts) if the I2C kernel drivers have not been loaded. The default baud rate is 100Kbps. If you wish to initialize the bus at a different baud rate you may issue, for example, gpio load i2c 200 . This will load the bus at 200kbps. In order to detect I2C devices, you could use the i2cdetect system command. Just remember that on a Rev 1 Raspberry Pi it's device 0, and on a Rev. 2 it's device 1. e.g. i2cdetect -y 0 # Rev 1 i2cdetect -y 1 # Rev 2 Example of using the I2C Bus // Register a device on the bus var myDevice = Pi.I2C.AddDevice(0x20); // Simple Write and Read (there are algo register read and write methods) myDevice.Write(0x44); var response = myDevice.Read(); // List registered devices on the I2C Bus foreach (var device in Pi.I2C.Devices) { Console.WriteLine($\"Registered I2C Device: {device.DeviceId}\"); } Timing and Threading TODO Serial Ports (UART) Where is the serial port API? Well, it is something we will most likely add in the future. For now, you can simply use the built-in SerialPort class the .NET framework provides. Similar Projects Raspberry# IO WiringPi.Net PiSharp"
  }
}