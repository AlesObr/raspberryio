{
  "api/Unosquare.RaspberryIO.Camera.CameraRect.html": {
    "href": "api/Unosquare.RaspberryIO.Camera.CameraRect.html",
    "title": "Struct CameraRect | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Struct CameraRect Defines the Raspberry Pi camera's sensor ROI (Region of Interest). Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Unosquare.RaspberryIO.Camera Syntax public struct CameraRect Fields Default The default ROI which is the entire area. Declaration public static readonly CameraRect Default Field Value Type Description CameraRect Properties H Gets or sets the height in relative coordinates. (0.0 to 1.0). Declaration public decimal H { get; set; } Property Value Type Description Decimal The h. IsDefault Gets a value indicating whether this instance is equal to the default (The entire area). Declaration public bool IsDefault { get; } Property Value Type Description Boolean true if this instance is default; otherwise, false . W Gets or sets the width in relative coordinates. (0.0 to 1.0). Declaration public decimal W { get; set; } Property Value Type Description Decimal The w. X Gets or sets the x in relative coordinates. (0.0 to 1.0). Declaration public decimal X { get; set; } Property Value Type Description Decimal The x. Y Gets or sets the y location in relative coordinates. (0.0 to 1.0). Declaration public decimal Y { get; set; } Property Value Type Description Decimal The y. Methods Clamp() Clamps the members of this ROI to their minimum and maximum values. Declaration public void Clamp() ToString() Returns a String that represents this instance. Declaration public override string ToString() Returns Type Description String A String that represents this instance. Overrides ValueType.ToString() Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Camera.CameraImageRotation.html": {
    "href": "api/Unosquare.RaspberryIO.Camera.CameraImageRotation.html",
    "title": "Enum CameraImageRotation | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Enum CameraImageRotation Defines the different image rotation modes for the Raspberry Pi's camera module. Namespace : Unosquare.RaspberryIO.Camera Syntax public enum CameraImageRotation Fields Name Description Degrees180 180 Degrees Degrees270 270 degrees Degrees90 90 Degrees None No rerotation Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Camera.CameraExposureMode.html": {
    "href": "api/Unosquare.RaspberryIO.Camera.CameraExposureMode.html",
    "title": "Enum CameraExposureMode | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Enum CameraExposureMode Defines the different exposure modes for the Raspberry Pi's camera module. Namespace : Unosquare.RaspberryIO.Camera Syntax public enum CameraExposureMode Fields Name Description AntiShake The anti shake Auto The automatic Backlight The backlight Beach The beach Fireworks The fireworks FixedFps The fixed FPS Night The night NightPreview The night preview Snow The snow Sports The sports Spotlight The spotlight VeryLong The very long Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Camera.CameraAnnotation.html": {
    "href": "api/Unosquare.RaspberryIO.Camera.CameraAnnotation.html",
    "title": "Enum CameraAnnotation | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Enum CameraAnnotation Defines the bit-wise mask flags for the available annotation elements for the Raspberry Pi's camera module. Namespace : Unosquare.RaspberryIO.Camera Syntax [Flags] public enum CameraAnnotation Fields Name Description CafSettings The caf settings Date The date FrameNumber The frame number GainSettings The gain settings LensSettings The lens settings MotionSettings The motion settings None The none ShutterSettings The shutter settings SolidBackground The solid background Time The time Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Computer.ProcessorModel.html": {
    "href": "api/Unosquare.RaspberryIO.Computer.ProcessorModel.html",
    "title": "Enum ProcessorModel | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Enum ProcessorModel Defines the processor model accordingly to new-style revision codes. Namespace : Unosquare.RaspberryIO.Computer Syntax public enum ProcessorModel Fields Name Description BCM2711 The BCM2711 processor. BCM2835 The BCMM2835 processor. BCM2836 The BCMM2836 processor. BCM2837 The BCMM2837 processor. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Computer.PiVersion.html": {
    "href": "api/Unosquare.RaspberryIO.Computer.PiVersion.html",
    "title": "Enum PiVersion | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Enum PiVersion Defines the board revision codes of the different versions of the Raspberry Pi http://www.raspberrypi-spy.co.uk/2012/09/checking-your-raspberry-pi-board-version/ . https://www.raspberrypi.org/documentation/hardware/raspberrypi/revision-codes/README.md . Namespace : Unosquare.RaspberryIO.Computer Syntax public enum PiVersion Fields Name Description ComputeModule0x11 The compute module 1 Sony ComputeModule0x14 The compute module 1 Embest ComputeModule3Embest The compute module 3 Rev1.0 Embest ComputeModule3PlusSony The compute module 3+ Rev 1.0 Sony ComputeModule3Sony The compute module 3 Rev1.0 Sony ModelAPlus0x12 The model A+ Rev1.1 Sony ModelAPlus0x15 The model A+ Rev1.1 Embest ModelAPlus1v1Sony The model A+ Rev1.1 (512MB) Sony ModelAx07 The model A Rev2 Egoman ModelAx08 The model A Rev2 Sony ModelAx09 The model A Rev2 Qisda ModelBPlus0x10 The model B+ Rev1 Sony ModelBPlus0x13 The model B+ Rev1.2 Embest ModelBPlus1v2Sony The model B+ Rev1.2 sony ModelBRev1 The model B Rev1 ModelBRev1ECN0001 The model B Rev1 ECN0001 ModelBRev2x04 The model B Rev2 Sony ModelBRev2x05 The model B Rev2 Qisda ModelBRev2x06 The model B Rev2 Egoman ModelBRev2x0d The model B Rev2 (512MB) Egoman ModelBRev2x0e The model B Rev2 (512MB) Sony ModelBRev2x0f The model B Rev2 (512MB) Egoman Pi2ModelB1v0Sony The Pi 2 model B Rev1.0 Sony Pi2ModelB1v1Embest The Pi 2 model B Rev1.1 Embest Pi2ModelB1v1Sony The Pi 2 model B Rev1.1 Sony Pi2ModelB1v2 The Pi 2 model B Rev1.2 Embest Pi3ModelAPlus The Pi 3 model A+ Sony Pi3ModelBEmbest The Pi 3 model B Rev1.2 Embest Pi3ModelBPlusSony The Pi 3 model B+ Rev1.3 Sony Pi3ModelBSony The Pi 3 model B Rev1.2 Sony Pi3ModelBSonyJapan The Pi 3 model B Rev1.2 Sony Japan Pi3ModelBStadium The Pi 3 model B Rev1.2 Stadium Pi4ModelB1Gb The Pi 4 model B 1GB, Sony Pi4ModelB2Gb The Pi 4 model B 2GB, Sony Pi4ModelB4Gb The Pi 4 model B 4GB, Sony PiZero1v2 The Pi Zero Rev1.2 Sony PiZero1v2Embest The Pi Zero Rev1.2 Embest PiZero1v3 The Pi Zero Rev1.3 SOny PiZero1v3Embest The Pi Zero Rev1.3 Embest PiZeroW The Pi Zero W Rev1.1 Unknown The unknown version Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Computer.NetworkAdapterInfo.html": {
    "href": "api/Unosquare.RaspberryIO.Computer.NetworkAdapterInfo.html",
    "title": "Class NetworkAdapterInfo | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Class NetworkAdapterInfo Represents a Network Adapter. Inheritance Object NetworkAdapterInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.RaspberryIO.Computer Syntax public class NetworkAdapterInfo Properties AccessPointName Gets the name of the access point. Declaration public string AccessPointName { get; } Property Value Type Description String IPv4 Gets the IP V4 address. Declaration public IPAddress IPv4 { get; } Property Value Type Description IPAddress IPv6 Gets the IP V6 address. Declaration public IPAddress IPv6 { get; } Property Value Type Description IPAddress IsWireless Gets a value indicating whether this instance is wireless. Declaration public bool IsWireless { get; } Property Value Type Description Boolean MacAddress Gets the MAC (Physical) address. Declaration public string MacAddress { get; } Property Value Type Description String Name Gets the name. Declaration public string Name { get; } Property Value Type Description String Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Computer.MemorySize.html": {
    "href": "api/Unosquare.RaspberryIO.Computer.MemorySize.html",
    "title": "Enum MemorySize | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Enum MemorySize Defines the memory size accordingly to new-style revision codes. Namespace : Unosquare.RaspberryIO.Computer Syntax public enum MemorySize Fields Name Description Memory1024 1 GB Memory2048 2 GB Memory256 256 MB Memory4096 4 GB Memory512 512 MB Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Computer.BoardModel.html": {
    "href": "api/Unosquare.RaspberryIO.Computer.BoardModel.html",
    "title": "Enum BoardModel | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Enum BoardModel Defines the board model accordingly to new-style revision codes. Namespace : Unosquare.RaspberryIO.Computer Syntax public enum BoardModel Fields Name Description Alpha Alpha (early prototype) CM1 Compute Module 1 CM3 Compute Module 3 CM3Plus Compute Module 3+ InternalUse Reserved (Internal use only) Model2B Model 2B Model3APlus Model 3A+ Model3B Model 3B Model3BPlus Model 3B+ Model4B Model 4B ModelA Model A ModelAPlus Model A+ ModelB Model B ModelBPlus Model B+ Zero Model Zero ZeroW Model Zero W Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Computer.AudioState.html": {
    "href": "api/Unosquare.RaspberryIO.Computer.AudioState.html",
    "title": "Struct AudioState | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Struct AudioState Manage the volume of any sound device. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Unosquare.RaspberryIO.Computer Syntax public struct AudioState Constructors AudioState(Int32, String, Int32, Single, Boolean) Initializes a new instance of the AudioState struct. Declaration public AudioState(int cardNumber, string controlName, int level, float decibels, bool isMute) Parameters Type Name Description Int32 cardNumber The card number. String controlName Name of the control. Int32 level The volume level in percentaje. Single decibels The volume level in decibels. Boolean isMute if set to true the audio is mute. Properties CardNumber Gets the card number. Declaration public int CardNumber { get; } Property Value Type Description Int32 ControlName Gets the name of the current control. Declaration public string ControlName { get; } Property Value Type Description String Decibels Gets the volume level in decibels. Declaration public float Decibels { get; } Property Value Type Description Single IsMute Gets a value indicating whether the audio is mute. Declaration public bool IsMute { get; } Property Value Type Description Boolean Level Gets the volume level in percentage. Declaration public int Level { get; } Property Value Type Description Int32 Methods ToString() Returns a String that represents the audio state. Declaration public override string ToString() Returns Type Description String A String that represents the audio state. Overrides ValueType.ToString() Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Camera.html": {
    "href": "api/Unosquare.RaspberryIO.Camera.html",
    "title": "Namespace Unosquare.RaspberryIO.Camera | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Namespace Unosquare.RaspberryIO.Camera Classes CameraColor A simple RGB color class to represent colors in RGB and YUV colorspaces. CameraController The Raspberry Pi's camera controller wrapping raspistill and raspivid programs. This class is a singleton. CameraSettingsBase A base class to implement raspistill and raspivid wrappers Full documentation available at https://www.raspberrypi.org/documentation/raspbian/applications/camera.md . CameraStillSettings Defines a wrapper for the raspistill program and its settings (command-line arguments). CameraVideoSettings Represents the raspivid camera settings for video capture functionality. Structs CameraRect Defines the Raspberry Pi camera's sensor ROI (Region of Interest). Enums CameraAnnotation Defines the bit-wise mask flags for the available annotation elements for the Raspberry Pi's camera module. CameraDynamicRangeCompensation Defines the different DRC (Dynamic Range Compensation) modes for the Raspberry Pi's camera module Helpful for low light photos. CameraExposureMode Defines the different exposure modes for the Raspberry Pi's camera module. CameraH264Profile Defines the different H.264 encoding profiles to be used when capturing video. CameraImageEffect Defines the available image effects for the Raspberry Pi's camera module. CameraImageEncodingFormat Defines the available encoding formats for the Raspberry Pi camera module. CameraImageRotation Defines the different image rotation modes for the Raspberry Pi's camera module. CameraMeteringMode Defines the different metering modes for the Raspberry Pi's camera module. CameraWhiteBalanceMode Defines the different AWB (Auto White Balance) modes for the Raspberry Pi's camera module. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Camera.CameraWhiteBalanceMode.html": {
    "href": "api/Unosquare.RaspberryIO.Camera.CameraWhiteBalanceMode.html",
    "title": "Enum CameraWhiteBalanceMode | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Enum CameraWhiteBalanceMode Defines the different AWB (Auto White Balance) modes for the Raspberry Pi's camera module. Namespace : Unosquare.RaspberryIO.Camera Syntax public enum CameraWhiteBalanceMode Fields Name Description Auto The automatic Cloud The cloud Flash The flash Fluorescent The fluorescent Horizon The horizon Incandescent The incandescent Off No white balance Shade The shade Sun The sun Tungsten The tungsten Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Camera.CameraColor.html": {
    "href": "api/Unosquare.RaspberryIO.Camera.CameraColor.html",
    "title": "Class CameraColor | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Class CameraColor A simple RGB color class to represent colors in RGB and YUV colorspaces. Inheritance Object CameraColor Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.RaspberryIO.Camera Syntax public class CameraColor Constructors CameraColor(Int32, Int32, Int32) Initializes a new instance of the CameraColor class. Declaration public CameraColor(int r, int g, int b) Parameters Type Name Description Int32 r The red. Int32 g The green. Int32 b The blue. CameraColor(Int32, Int32, Int32, String) Initializes a new instance of the CameraColor class. Declaration public CameraColor(int r, int g, int b, string name) Parameters Type Name Description Int32 r The red. Int32 g The green. Int32 b The blue. String name The well-known color name. Properties B Gets the blue byte. Declaration public byte B { get; } Property Value Type Description Byte Black Gets the predefined black color. Declaration public static CameraColor Black { get; } Property Value Type Description CameraColor Blue Gets the predefined blue color. Declaration public static CameraColor Blue { get; } Property Value Type Description CameraColor G Gets the green byte. Declaration public byte G { get; } Property Value Type Description Byte Green Gets the predefined green color. Declaration public static CameraColor Green { get; } Property Value Type Description CameraColor Name Gets the well-known color name. Declaration public string Name { get; } Property Value Type Description String R Gets the red byte. Declaration public byte R { get; } Property Value Type Description Byte Red Gets the predefined red color. Declaration public static CameraColor Red { get; } Property Value Type Description CameraColor RGB Gets the RGB byte array (3 bytes). Declaration public byte[] RGB { get; } Property Value Type Description Byte [] White Gets the predefined white color. Declaration public static CameraColor White { get; } Property Value Type Description CameraColor YUV Gets the YUV byte array (3 bytes). Declaration public byte[] YUV { get; } Property Value Type Description Byte [] Methods ToRgbHex(Boolean) Returns a hexadecimal representation of the RGB byte array. Preceded by 0x and all in lowercase. Declaration public string ToRgbHex(bool reverse) Parameters Type Name Description Boolean reverse if set to true [reverse]. Returns Type Description String A string. ToYuvHex(Boolean) Returns a hexadecimal representation of the YUV byte array. Preceded by 0x and all in lowercase. Declaration public string ToYuvHex(bool reverse) Parameters Type Name Description Boolean reverse if set to true [reverse]. Returns Type Description String A string. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.html": {
    "href": "api/Unosquare.RaspberryIO.html",
    "title": "Namespace Unosquare.RaspberryIO | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Namespace Unosquare.RaspberryIO Classes Pi Our main character. Provides access to the Raspberry Pi's GPIO, system and board information and Camera. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Native.SystemName.html": {
    "href": "api/Unosquare.RaspberryIO.Native.SystemName.html",
    "title": "Struct SystemName | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Struct SystemName OS uname structure. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Unosquare.RaspberryIO.Native Syntax public struct SystemName Fields DomainName Domain name. Declaration public string DomainName Field Value Type Description String Machine Hardware level. Declaration public string Machine Field Value Type Description String NodeName Node name. Declaration public string NodeName Field Value Type Description String Release Release level. Declaration public string Release Field Value Type Description String SysName System name. Declaration public string SysName Field Value Type Description String Version Version level. Declaration public string Version Field Value Type Description String Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Computer.html": {
    "href": "api/Unosquare.RaspberryIO.Computer.html",
    "title": "Namespace Unosquare.RaspberryIO.Computer | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Namespace Unosquare.RaspberryIO.Computer Classes AudioSettings Settings for audio device. DsiDisplay The Official Raspberry Pi 7-inch touch display from the foundation Some docs available here: http://forums.pimoroni.com/t/official-7-raspberry-pi-touch-screen-faq/959 . NetworkAdapterInfo Represents a Network Adapter. NetworkSettings Represents the network information. OsInfo Represents the OS Information. SystemInfo Retrieves the RaspberryPI System Information. http://raspberry-pi-guide.readthedocs.io/en/latest/system.html . WirelessNetworkInfo Represents a wireless network information. Structs AudioState Manage the volume of any sound device. Enums BoardModel Defines the board model accordingly to new-style revision codes. Manufacturer Defines the manufacturer accordingly to new-style revision codes. MemorySize Defines the memory size accordingly to new-style revision codes. PiVersion Defines the board revision codes of the different versions of the Raspberry Pi http://www.raspberrypi-spy.co.uk/2012/09/checking-your-raspberry-pi-board-version/ . https://www.raspberrypi.org/documentation/hardware/raspberrypi/revision-codes/README.md . ProcessorModel Defines the processor model accordingly to new-style revision codes. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Computer.Manufacturer.html": {
    "href": "api/Unosquare.RaspberryIO.Computer.Manufacturer.html",
    "title": "Enum Manufacturer | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Enum Manufacturer Defines the manufacturer accordingly to new-style revision codes. Namespace : Unosquare.RaspberryIO.Computer Syntax public enum Manufacturer Fields Name Description Egoman Egoman Embest Embest Embest2 Embest SonyJapan Sony Japan SonyUK Sony UK Stadium Stadium Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Computer.DsiDisplay.html": {
    "href": "api/Unosquare.RaspberryIO.Computer.DsiDisplay.html",
    "title": "Class DsiDisplay | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Class DsiDisplay The Official Raspberry Pi 7-inch touch display from the foundation Some docs available here: http://forums.pimoroni.com/t/official-7-raspberry-pi-touch-screen-faq/959 . Inheritance Object DsiDisplay Namespace : Unosquare.RaspberryIO.Computer Syntax public class DsiDisplay : SingletonBase<DsiDisplay> Properties Brightness Gets or sets the brightness of the DSI display via filesystem. Declaration public byte Brightness { get; set; } Property Value Type Description Byte The brightness. IsBacklightOn Gets or sets a value indicating whether the backlight of the DSI display on. This operation is performed via the file system. Declaration public bool IsBacklightOn { get; set; } Property Value Type Description Boolean true if this instance is backlight on; otherwise, false . IsPresent Gets a value indicating whether the Pi Foundation Display files are present. Declaration public bool IsPresent { get; } Property Value Type Description Boolean true if this instance is present; otherwise, false . Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Computer.AudioSettings.html": {
    "href": "api/Unosquare.RaspberryIO.Computer.AudioSettings.html",
    "title": "Class AudioSettings | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Class AudioSettings Settings for audio device. Inheritance Object AudioSettings Namespace : Unosquare.RaspberryIO.Computer Syntax public class AudioSettings : SingletonBase<AudioSettings> Methods GetState(Int32, String) Gets the current audio state. Declaration public Task<AudioState> GetState(int cardNumber = 0, string controlName = \"PCM\") Parameters Type Name Description Int32 cardNumber The card number. String controlName Name of the control. Returns Type Description Task < AudioState > An AudioState object. Exceptions Type Condition InvalidOperationException Invalid command, card number or control name. IncrementVolume(Single, Int32, String) Increments the volume by decibels. Declaration public Task IncrementVolume(float decibels, int cardNumber = 0, string controlName = \"PCM\") Parameters Type Name Description Single decibels The decibels to increment or decrement. Int32 cardNumber The card number. String controlName Name of the control. Returns Type Description Task A Task representing the asynchronous operation. Exceptions Type Condition InvalidOperationException Invalid card number or control name. SetVolumeByDecibels(Single, Int32, String) Sets the volume by decibels. Declaration public Task SetVolumeByDecibels(float decibels, int cardNumber = 0, string controlName = \"PCM\") Parameters Type Name Description Single decibels The decibels. Int32 cardNumber The card number. String controlName Name of the control. Returns Type Description Task A Task representing the asynchronous operation. Exceptions Type Condition InvalidOperationException Invalid card number or control name. SetVolumePercentage(Int32, Int32, String) Sets the volume percentage. Declaration public Task SetVolumePercentage(int level, int cardNumber = 0, string controlName = \"PCM\") Parameters Type Name Description Int32 level The percentage level. Int32 cardNumber The card number. String controlName Name of the control. Returns Type Description Task A Task representing the asynchronous operation. Exceptions Type Condition InvalidOperationException Invalid card number or control name. ToggleMute(Boolean, Int32, String) Toggles the mute state. Declaration public Task ToggleMute(bool mute, int cardNumber = 0, string controlName = \"PCM\") Parameters Type Name Description Boolean mute if set to true , mutes the audio. Int32 cardNumber The card number. String controlName Name of the control. Returns Type Description Task A Task representing the asynchronous operation. Exceptions Type Condition InvalidOperationException Invalid card number or control name. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Camera.CameraImageEffect.html": {
    "href": "api/Unosquare.RaspberryIO.Camera.CameraImageEffect.html",
    "title": "Enum CameraImageEffect | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Enum CameraImageEffect Defines the available image effects for the Raspberry Pi's camera module. Namespace : Unosquare.RaspberryIO.Camera Syntax public enum CameraImageEffect Fields Name Description Blackboard The blackboard Blur The blur Cartoon The cartoon ColourBalance The colour balance ColourPoint The colour point Denoise The denoise Emboss The emboss Film The film GPen Graphite Pen Hatch The hatch Negative The negative None No effect OilPaint The oil paint Pastel The pastel Saturation The saturation Sketch The sketch Solarise The solarise SolourSwap The solour swap WashedOut The washed out WaterColour The water colour Whiteboard The whiteboard Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Camera.CameraController.html": {
    "href": "api/Unosquare.RaspberryIO.Camera.CameraController.html",
    "title": "Class CameraController | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Class CameraController The Raspberry Pi's camera controller wrapping raspistill and raspivid programs. This class is a singleton. Inheritance Object CameraController Namespace : Unosquare.RaspberryIO.Camera Syntax public class CameraController : SingletonBase<CameraController> Properties IsBusy Gets a value indicating whether the camera module is busy. Declaration public bool IsBusy { get; } Property Value Type Description Boolean true if this instance is busy; otherwise, false . Methods CaptureImage(CameraStillSettings) Captures an image. Declaration public byte[] CaptureImage(CameraStillSettings settings) Parameters Type Name Description CameraStillSettings settings The settings. Returns Type Description Byte [] The image bytes. CaptureImageAsync(CameraStillSettings, CancellationToken) Captures an image asynchronously. Declaration public Task<byte[]> CaptureImageAsync(CameraStillSettings settings, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description CameraStillSettings settings The settings. CancellationToken ct The ct. Returns Type Description Task < Byte []> The image bytes. Exceptions Type Condition InvalidOperationException Cannot use camera module because it is currently busy. CaptureImageJpeg(Int32, Int32) Captures a JPEG encoded image at 90% quality. Declaration public byte[] CaptureImageJpeg(int width, int height) Parameters Type Name Description Int32 width The width. Int32 height The height. Returns Type Description Byte [] The image bytes. CaptureImageJpegAsync(Int32, Int32, CancellationToken) Captures a JPEG encoded image asynchronously at 90% quality. Declaration public Task<byte[]> CaptureImageJpegAsync(int width, int height, CancellationToken ct = default(CancellationToken)) Parameters Type Name Description Int32 width The width. Int32 height The height. CancellationToken ct The ct. Returns Type Description Task < Byte []> The image bytes. CloseVideoStream() Closes the video stream of a video stream is open. Declaration public void CloseVideoStream() OpenVideoStream(Action<Byte[]>, Action) Opens the video stream with a timeout of 0 (running indefinitely) at 1080p resolution, variable bitrate and 25 FPS. No preview is shown. Declaration public void OpenVideoStream(Action<byte[]> onDataCallback, Action onExitCallback = null) Parameters Type Name Description Action < Byte []> onDataCallback The on data callback. Action onExitCallback The on exit callback. OpenVideoStream(CameraVideoSettings, Action<Byte[]>, Action) Opens the video stream with the supplied settings. Capture Timeout Milliseconds has to be 0 or greater. Declaration public void OpenVideoStream(CameraVideoSettings settings, Action<byte[]> onDataCallback, Action onExitCallback) Parameters Type Name Description CameraVideoSettings settings The settings. Action < Byte []> onDataCallback The on data callback. Action onExitCallback The on exit callback. Exceptions Type Condition InvalidOperationException Cannot use camera module because it is currently busy. ArgumentException CaptureTimeoutMilliseconds. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "README.html": {
    "href": "README.html",
    "title": "RaspberryIO - Pi's hardware access from .NET | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "RaspberryIO - Pi's hardware access from .NET ⭐ Please star this project if you find it useful! The Raspberry Pi's IO Functionality in an easy-to-use API for .NET (Mono/.NET Core). Our mission is to make .NET a first-class citizen in the Python-centric community of Raspberry Pi developers. Table of contents Features Peripherals Breaking changes Version ≥ 0.18.0 Installation Running the latest version of Mono For Debian Stretch Running .NET Core 2.2.4 Usage Run the app on the raspberry Obtaining Board and System Information Using the GPIO Pins Pin Information Digital Read and Write Hardware PWM Software PWM Tone Generation Interrupts and Callbacks Using the SPI Bus I2C to connect ICs Timing and Threading Timing Threading Serial Ports (UART) The Camera Module Capturing Images Capturing Video Audio settings Handy Notes Related Projects and Nugets Features This library enables developers to use the various Raspberry Pi's hardware modules: Pi.Camera Provides access to the official Raspberry Pi Camera module. Pi.Info Provides information on this Raspberry Pi's CPU and form factor. Pi.Gpio Provides access to the Raspberry Pi's GPIO as a collection of GPIO Pins. Pi.Spi Provides access to the 2-channel SPI bus. Pi.I2c Provides access to the functionality of the I2C bus. Pi.Timing Provides access to The PI's Timing and threading API. Peripherals We offer an additional package with helpful classes to use peripherals, many of them are from pull requests from our contributors. The current set of peripherals supported are: Infrared Sensor HX-1838 Led Strip APA-102C NFC/RFID Controller MFRC-522 DHT family digital relative humidity and temperature sensors: DHT11 DHT12 DHT21 / AM-2301 DHT22 / AM-2302 OLED Display SSD-1306 Generic Button connected to GPIO GY-521 MPU6050 Accelerometer Ultrasonic Sensor HC-SR04 Breaking changes Version ≥ 0.18.0 In the beginning, RaspberryIO was built around WiringPi library and all our classes, properties, enums, etc. was based on those ones used in WiringPi too. Now, we are working on a more general version of RaspberryIO (Abstractions) that, could use any core library (WiringPi, PiGpio or even new ones). So, it was necessary to change certain properties and enums for more general ones. Pinout numbering system A breaking change in this new general version is the pinout numbering system. As we already explained above, RaspberryIO was using the WiringPi pinout numbering system, but now it uses the BCM pinout numbering system . Note: The pin numbers are totally different in both systems, so we recommend you to double check carefully the physical pins where you connect any device. Installation Install basic Raspberry.IO package: PM> Install-Package Unosquare.Raspberry.IO If you want to implement your own provider for RaspberryIO, you must use the following package to implement all the Pi providers: PM> Install-Package Unosquare.WiringPi Note: For now, we have fully implemented the WiringPi library and we are working in the PiGpio implementation. Install Raspberry.IO Peripherals package (Optional): PM> Install-Package Unosquare.RaspberryIO.Peripherals Running the latest version of Mono It is recommended that you install the latest available release of Mono because what is available in the Raspbian repo is quite old (3.X). These commands were tested using Raspbian Stretch. The version of Mono that is installed at the time of this writing is: Mono JIT compiler version 5.20.1.19 (tarball Thu Apr 11 19:13 UTC 2019) The commands to get Mono installed are the following: For Debian Stretch sudo apt install apt-transport-https dirmngr gnupg ca-certificates sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF echo \"deb https://download.mono-project.com/repo/debian stable-raspbianstretch main\" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list sudo apt update sudo apt-get install mono-complete Now, verify your version of Mono by running mono --version . Version 4.6 and above should be good enough. Running .NET Core 2.2.4 This project can also run in .NET Core. To install .Net Core 2.2.4 runtime please execute the following commands: $ sudo apt-get -y update $ sudo apt-get -y install libunwind8 gettext $ wget https://download.visualstudio.microsoft.com/download/pr/8c52648c-bedd-44b0-9442-95cd830fdada/d6ba4c50a6b2afddc4ae3d313349f3ac/dotnet-runtime-2.2.4-linux-arm.tar.gz $ sudo mkdir /opt/dotnet $ sudo tar -xvf dotnet-runtime-2.2.4-linux-arm.tar.gz -C /opt/dotnet/ $ sudo ln -s /opt/dotnet/dotnet /usr/local/bin Now, verify your version of Mono by running dotnet --info . Usage Before start using RaspberryIO, you must initialize Pi class (bootstrapping process) with the valid Abstractions implementation, in order to let Pi know what implementation is going to use: Pi.Init<BootstrapWiringPi>(); Run the app on the raspberry You need to publish the project and you can accomplish this by using dotnet-sshdeploy but first, you must edit these properties inside the csproj file in order to establish an ssh connection with your raspberry <SshDeployHost>172.16.17.54</SshDeployHost> <SshDeployTargetPath>/home/pi/Playground</SshDeployTargetPath> <SshDeployUsername>pi</SshDeployUsername> <SshDeployPassword>raspberry</SshDeployPassword> Install dotnet-sshdeploy as a global tool by running $ dotnet tool install -g dotnet-sshdeploy Execute dotnet-sshdeploy push in the same folder where Unosquare.RaspberryIO.Playground.csproj resides and if everything executes correctly you should see an output like this: SSH Deployment Tool [Version 0.3.1.0] (c)2015 - 2017 Unosquare SA de CV. All Rights Reserved. For additional help, please visit https://github.com/unosquare/sshdeploy Deploying... Configuration Debug Framework dotnetcore2.2 Source Path C:\\raspberryio\\src\\Unosquare.RaspberryIO.Playground\\bin\\Debug\\dotnetcore2.2\\publish Excluded Files .ready|.vshost.exe|.vshost.exe.config Target Address 172.16.17.54:22 Username pi Target Path /home/pi/Playground Clean Target NO Pre Deployment Post Deployment Connecting to host 172.16.17.54:22 via SSH. Connecting to host 172.16.17.54:22 via SFTP. Target Path '/home/pi/Playground' does not exist. -- Will attempt to create. Target Path '/home/pi/Playground' created successfully. Cleaning Target Path '/home/pi/Playground' Deploying 8 files. Finished deployment in 1.25 seconds. Completed. The default TargetFramework is net461 but you can change this by either modifying the RuntimeIdentifier property inside the csproj file or supplying it as a parameter like this dotnet-sshdeploy push -f netcoreapp2.2 . More information about dotnet-sshdeploy see this Run the project Using Mono: First of all, you need to give permissions to run the project by running the next command on your target folder: ubuntu@ubuntu:~/publish$ sudo chmod u+x * Or you just can add the SshDeployExecutePermission tag in your project's csproj file: <SshDeployExecutePermission>true</SshDeployExecutePermission> Or use the appropriate command line argument: dotnet-sshdeploy push ... -x true Then you can run your project: ubuntu@ubuntu:~/publish$ ./Unosquare.RaspberryIO.Playground Using .Net Core ubuntu@ubuntu:~/publish$ dotnet Unosquare.RaspberryIO.Playground.dll Note : Depending on the underlying library, you may need to use root user privileges to run the app. Obtaining Board and System Information RaspberryIO contains useful utilities to obtain information about the board it is running on. You can simply call the Pi.Info.ToString() method to obtain a dump of all system properties as a single string , or you can use the individual properties such as Installed RAM, Processor Count, Raspberry Pi Version, Serial Number, etc. There's not a lot more to this. Using the GPIO Pins Pin reference for the B plus (B+) - Header P1 BCM Name Mode V L R V Mode Name BCM 3.3v 01 02 5v 2 SDA.1 ALT0 1 03 04 5V 3 SCL.1 ALT0 1 05 06 GND 4 GPIO. 7 IN 1 07 08 1 ALT0 TxD 14 GND 09 10 1 ALT0 RxD 15 17 GPIO. 0 IN 0 11 12 0 IN GPIO. 1 18 27 GPIO. 2 IN 0 13 14 GND 22 GPIO. 3 IN 0 15 16 0 IN GPIO. 4 23 3.3v 17 18 0 IN GPIO. 5 24 10 MOSI IN 0 19 20 GND 9 MISO IN 0 21 22 0 IN GPIO. 6 25 11 SCLK IN 0 23 24 1 IN CE0 8 GND 25 26 1 IN CE1 7 0 SDA.0 IN 1 27 28 1 IN SCL.0 1 5 GPIO.21 IN 1 29 30 GND 6 GPIO.22 IN 1 31 32 0 IN GPIO.26 12 13 GPIO.23 IN 0 33 34 GND 19 GPIO.24 IN 0 35 36 0 IN GPIO.27 16 26 GPIO.25 IN 0 37 38 0 IN GPIO.28 20 GND 39 40 0 IN GPIO.29 21 The above diagram shows the pins of GPIO Header P1. There is an additional GPIO header on the Pi called P5. More info available here In order to access the pins, use Pi.Gpio . The pins can have multiple behaviors and fortunately Pi.Gpio can be iterated, addressed by index, addressed by BCM pin number and provides the pins as publicly accessible properties. Here is an example of addressing the pins in all the various ways: public static void TestLedBlinking() { // Get a reference to the pin you need to use. // Both methods below are equivalent var blinkingPin = Pi.Gpio[17]; blinkingPin = Pi.Gpio[BcmPin.Gpio17]; // Configure the pin as an output blinkingPin.PinMode = GpioPinDriveMode.Output; // perform writes to the pin by toggling the isOn variable var isOn = false; for (var i = 0; i < 20; i++) { isOn = !isOn; blinkingPin.Write(isOn); System.Threading.Thread.Sleep(500); } } Pin Information All pins have handy properties and methods that you can use to drive them. For example, you can examine the Capabilities property to find out which features are available on the pin. You can also use the PinMode property to get or set the operating mode of the pin. Please note that the value of the PinMode property is by default set to Input and it will return the last mode you set the property to. Digital Read and Write It is very easy to read and write values to the pins. In general, it is a 2-step process. Set the pin mode Read or write the bit value Reading the value of a pin example: Pi.Gpio.Pin27.PinMode = GpioPinDriveMode.Input; // The below lines are reoughly equivalent var isOn = Pi.Gpio.Pin27.Read(); // Reads as a boolean var pinValue = Pi.Gpio.Pin27.ReadValue(); // Reads as a GpioPinValue Writing to a pin example Pi.Gpio.Pin27.PinMode = GpioPinDriveMode.Output; // The below lines are reoughly equivalent Pi.Gpio.Pin27.Write(true); // Writes a boolean Pi.Gpio.Pin27.Write(GpioPinValue.High); // Writes a pin value Hardware PWM Simple code for led dimming: var pin = Pi.Gpio[BcmPin.Gpio24]; pin.PinMode = GpioPinDriveMode.PwmOutput; pin.PwmMode = PwmMode.Balanced; pin.PwmClockDivisor = 2; while (true) { for (var x = 0; x <= 100; x++) { pin.PwmRegister = (int)pin.PwmRange / 100 * x; Thread.Sleep(10); } for (var x = 0; x <= 100; x++) { pin.PwmRegister = (int)pin.PwmRange - ((int)pin.PwmRange / 100 * x); Thread.Sleep(10); } } PwmRange is the maximun value of the pulse width, than means 100% of pulse width. Changing this value allows you to have a more fine or coarse control of the pulse width (default 1024). PwmRegister is the current pulse width. Changing this value allows you to change the current pulse width and thus the duty cycle. Duty Cycle is equals to PwmRegister divide by PwmRange . Assuming a PwmRange value of 1024 (default), we have: PwmRegister Duty Cycle 0 0% 256 25% 512 50% 768 75% 1024 100% Note: Hardware PWM can be used only in GPIO13 and GPIO18. Software PWM Simple code for led dimming: var range = 100; var pin = Pi.Gpio[BcmPin.Gpio24]; pin.PinMode = GpioPinDriveMode.Output; pin.StartSoftPwm(0, range); while (true) { for (var x = 0; x <= 100; x++) { pin.SoftPwmValue = range / 100 * x; Thread.Sleep(10); } for (var x = 0; x <= 100; x++) { pin.SoftPwmValue = range - (range / 100 * x); Thread.Sleep(10); } } SoftPwmRange is the range of the pulse width, than means 100% of pulse width (We notice better performance using a range value of 100). SoftPwmValue is the current pulse width. Changing this value allows you to change the current pulse width and thus the duty cycle. Note: Software PWM can be used in any GPIO. Tone Generation You can emit tones by using SoftToneFrequency. Example: // Get a reference to the pin var passiveBuzzer = Pi.Gpio[BcmPin.Gpio24]; // Set the frequency to Alto Do (523Hz) passiveBuzzer.SoftToneFrequency = 523 // Wait 1 second System.Threading.Thread.Sleep(1000); // And stop passiveBuzzer.SoftToneFrequency = 0; Interrupts and Callbacks Register an Interrupt Callback example: using System; using Unosquare.RaspberryIO; using Unosquare.RaspberryIO.Gpio; class Program { // Define the implementation of the delegate; static void ISRCallback() { Console.WriteLine(\"Pin Activated...\"); } static void Main(string[] args) { Console.WriteLine(\"Gpio Interrupts\"); var pin = Pi.Gpio.Pin24; pin.PinMode = GpioPinDriveMode.Input; pin.RegisterInterruptCallback(EdgeDetection.FallingEdge, ISRCallback); Console.ReadKey(); } } Using the SPI Bus I really liked the following description from Neil's Log Book : The SPI (Serial Peripheral Interface) protocol behaves like a ring buffer so that whenever the master sends a byte to the slave, the slave sends a byte back to the master. The slave can use this behavior to return a status byte, a response to a previous byte, or null data (the master may choose to read the returned byte or ignore it). The bus operates on a 4-wire interface. RaspberryIO provides easy access to the 2 SPI channels available on the Raspberry. The functionality depends on Wiring Pi 's SPI library. Please note that you may need to issue the command gpio load spi before starting your application (or as a System.Diagnostics.Process when your application starts) if the SPI kernel drivers have not been loaded. In order to use an SPI channel you MUST always set the Channel0Frequency or Channel1Frequency (depending on the channel you want to use) before calling the SendReceive method. If the property is not set beforehand the SPI channel will fail initialization. See an example below: Example of using the SPI Bus Pi.Spi.Channel0Frequency = SpiChannel.MinFrequency; var request = System.Text.Encoding.ASCII.GetBytes(\"HELLO!\"); var response = Pi.Spi.Channel0.SendReceive(request); Note : In order to enable the second SPI channel (SPI1) you need to add dtoverlay=spi1-1cs to the config file. I2C to connect ICs The Inter IC Bus (I2C) is a cousin of the SPI bus but it is somewhat more complex and it does not work as a ring buffer like the SPI bus. It also connects all of its slave devices in series and depends on 2 lines only. There is a nice tutorial on setting up and using the I2C bus at Robot Electronics . From their site: The physical bus is just two wires, called SCL and SDA. SCL is the clock line. It is used to synchronize all data transfers over the I2C bus. SDA is the data line. The SCL & SDA lines are connected to all devices on the I2C bus. There needs to be a third wire which is just the ground or 0 volts. There may also be a 5volt wire is power is being distributed to the devices. Both SCL and SDA lines are \"open drain\" drivers. What this means is that the chip can drive its output low, but it cannot drive it high. For the line to be able to go high you must provide pull-up resistors to the 5v supply. There should be a resistor from the SCL line to the 5v line and another from the SDA line to the 5v line. You only need one set of pull-up resistors for the whole I2C bus, not for each device. RaspberryIO provides easy access to the I2C bus available on the Raspberry. Please note that you may need to issue the command gpio load i2c before starting your application (or as a System.Diagnostics.Process when your application starts) if the I2C kernel drivers have not been loaded. The default baud rate is 100Kbps. If you wish to initialize the bus at a different baud rate you may issue, for example, gpio load i2c 200 . This will load the bus at 200kbps. In order to detect I2C devices, you could use the i2cdetect system command. Just remember that on a Rev 1 Raspberry Pi it's device 0, and on a Rev. 2 it's device 1. e.g. i2cdetect -y 0 # Rev 1 i2cdetect -y 1 # Rev 2 Example of using the I2C Bus: // Register a device on the bus var myDevice = Pi.I2C.AddDevice(0x20); // Simple Write and Read (there are algo register read and write methods) myDevice.Write(0x44); var response = myDevice.Read(); // List registered devices on the I2C Bus foreach (var device in Pi.I2C.Devices) { Console.WriteLine($\"Registered I2C Device: {device.DeviceId}\"); } Timing and Threading Timing System calls to provide various timing and sleeping functions. Getting the number of microseconds or milliseconds since system boot: // Getting the number of microseconds since system boot. var micros = Pi.Timing.Microseconds; // Getting the number of milliseconds since system boot. var millis = Pi.Timing.Milliseconds; Pausing program execution for a certain number of microseconds or milliseconds. // Pausing program execution for 50 microseconds. Pi.Timing.SleepMicroseconds(50); // Pausing program execution for 100 milliseconds. Pi.Timing.SleepMilliseconds(100); Threading Allows the creation of a thread which is another function in your program that runs concurrently with your main program. An example may be to have this function wait for an interrupt while your program carries on doing other tasks. The thread can indicate an event, or action by using global variables to communicate back to the main program, or other threads. Basic thread creation: static void Main() { ... Pi.Threading.StartThread(ThreadWorker); ... } private void ThreadWorker() { // Thread body } Passing data to a thread: static void Main() { ... var threadName = \"Thread 1\"; var namePointer = (IntPtr)Marshal.StringToHGlobalAnsi(threadName); var threadHandle = Pi.Threading.StartThreadEx(ThreadWorker, namePointer); ... Pi.Threading.StopThreadEx(threadHandle); ... } private void ThreadWorker(IntPtr state) { var threadName = Marshal.PtrToStringAnsi(state); // Thread body } Note : Not all underlying libraries support all methods for creating threads. WiringPi, for example, does only support basic thread creation. Serial Ports (UART) Where is the serial port API? Well, it is something we will most likely add in the future. For now, you can simply use the built-in SerialPort class the .NET framework provides. The Camera Module The Pi.Camera module uses raspivid and raspistill to access the camera so they must be installed in order for your program to work properly. raspistill arguments are specified in an instance of the CameraStillSettings class, while the raspivid arguments are specified in an instance of the CameraVideoSettings class. Capturing Images The Pi.Camera.CaptureImage* methods simply return an array of bytes containing the captured image. There are synchronous and asynchronous falvors of these methods so you can use the familiar async and await pattern to capture your images. All raspistill arguments (except for those that control user interaction such as -k ) are available via the CameraStillSettings . To start, create a new instance of the CameraStillSettings class and pass it on to your choice of the Pi.Camera.CaptureImage* methods. There are shortcut methods available that simply take a JPEG image at the given Width and Height. By default, the shortcut methods set the JPEG quality at 90%. Example using a shortcut method: static void TestCaptureImage() { var pictureBytes = Pi.Camera.CaptureImageJpeg(640, 480); var targetPath = \"/home/pi/picture.jpg\"; if (File.Exists(targetPath)) File.Delete(targetPath); File.WriteAllBytes(targetPath, pictureBytes); Console.WriteLine($\"Took picture -- Byte count: {pictureBytes.Length}\"); } Example using a CaptureImage method: static byte[] TestCaptureImage() { var settings = new CameraStillSettings { CaptureWidth = 640, CaptureHeight = 480, CaptureJpegQuality = 90, CaptureTimeoutMilliseconds = 300 }; return CaptureImage(settings); } Capturing Video Capturing video streams is somewhat different but it is still very easy to do. The concept behind it is to Open a video stream providing your own callback. When opening the stream Raspberry IO will spawn a separate thread and will not block the execution of your code, but it will continually call your callback method containing the bytes that are being read from the camera until the Close method is called or until the timeout is reached. Example of capturing a stream of H.264 video static void TestCaptureVideo() { // Setup our working variables var videoByteCount = 0; var videoEventCount = 0; var startTime = DateTime.UtcNow; // Configure video settings var videoSettings = new CameraVideoSettings() { CaptureTimeoutMilliseconds = 0, CaptureDisplayPreview = false, ImageFlipVertically = true, CaptureExposure = CameraExposureMode.Night, CaptureWidth = 1920, CaptureHeight = 1080 }; try { // Start the video recording Pi.Camera.OpenVideoStream(videoSettings, onDataCallback: (data) => { videoByteCount += data.Length; videoEventCount++; }, onExitCallback: null); // Wait for user interaction startTime = DateTime.UtcNow; Console.WriteLine(\"Press any key to stop reading the video stream . . .\"); Console.ReadKey(true); } catch (Exception ex) { Console.WriteLine($\"{ex.GetType()}: {ex.Message}\"); } finally { // Always close the video stream to ensure raspivid quits Pi.Camera.CloseVideoStream(); // Output the stats var megaBytesReceived = (videoByteCount / (1024f * 1024f)).ToString(\"0.000\"); var recordedSeconds = DateTime.UtcNow.Subtract(startTime).TotalSeconds.ToString(\"0.000\"); Console.WriteLine($\"Capture Stopped. Received {megaBytesReceived} Mbytes in {videoEventCount} callbacks in {recordedSeconds} seconds\"); } } Audio settings Basic audio settings have been implemented in RaspberryIO: Set a specific volume level percentage. Set a specific volume level in decibels (dB) Mute an audio device. Consult audio device settings. Users set an audio card, an audio device and an audio command to perform an audio action. Example of audio tasks: await Pi.PiVolumeControl.SetVolumePercentage(85); await Pi.PiVolumeControl.SetVolumeByDecibels(-1.00f); The code above sets the volume level in two different formats: Percentage or Decibels. The first method sets the volume on percentage (0% - 100%) and the second sets the volume level on decibels(dB) (-101.32dB - 4.00dB). Users can consult the current audio settings by using the method GetState. An example is shown below: var currentState = await Pi.Audio.GetState(); Console.WriteLine(currentState); The same result can be achieved by setting the volume level to 0% or -9999.99dB. Handy Notes In order to setup Wi-Fi, run: sudo nano /etc/wpa_supplicant/wpa_supplicant.conf A good file should look like this: country=US ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 network={ ssid=\"your_real_wifi_ssid\" scan_ssid=1 psk=\"your_real_password\" } And then restart the services as follows: sudo systemctl daemon-reload sudo systemctl restart dhcpcd You can also configure most boot options by running: sudo raspi-config Related Projects and Nugets Name Author Description WiringPi.net Unosquare Provides complete managed access to the popular wiringpi C library PiGpio.net Unosquare Provides complete managed access to the popular pigpio C library Raspberry Abstractions Unosquare Allows you to implement your own provider for RaspberryIO. Raspberry# IO raspberry-sharp Raspberry# IO is a .NET/Mono IO Library for Raspberry Pi. This project is an initiative of the Raspberry# Community. WiringPi.Net Daniel Riches A simple C# wrapper for Gordon's WiringPi library. PiSharp Andy Bradford Pi# is a library to expose the GPIO functionality of the Raspberry Pi computer to the C# and Visual Basic.Net languages"
  },
  "api/Unosquare.RaspberryIO.Pi.html": {
    "href": "api/Unosquare.RaspberryIO.Pi.html",
    "title": "Class Pi | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Class Pi Our main character. Provides access to the Raspberry Pi's GPIO, system and board information and Camera. Inheritance Object Pi Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.RaspberryIO Syntax public static class Pi Properties Audio Provides access to Raspberry Pi ALSA sound card driver. Declaration public static AudioSettings Audio { get; } Property Value Type Description AudioSettings Camera Provides access to the official Raspberry Pi Camera. Declaration public static CameraController Camera { get; } Property Value Type Description CameraController Gpio Provides access to the Raspberry Pi's GPIO as a collection of GPIO Pins. Declaration public static IGpioController Gpio { get; } Property Value Type Description IGpioController I2C Provides access to the functionality of the i2c bus. Declaration public static II2CBus I2C { get; } Property Value Type Description II2CBus Info Provides information on this Raspberry Pi's CPU and form factor. Declaration public static SystemInfo Info { get; } Property Value Type Description SystemInfo PiDisplay Provides access to the official Raspberry Pi 7-inch DSI Display. Declaration public static DsiDisplay PiDisplay { get; } Property Value Type Description DsiDisplay Spi Provides access to the 2-channel SPI bus. Declaration public static ISpiBus Spi { get; } Property Value Type Description ISpiBus Threading Provides access to threading functionality. Declaration public static IThreading Threading { get; } Property Value Type Description IThreading Timing Provides access to timing functionality. Declaration public static ITiming Timing { get; } Property Value Type Description ITiming Methods Init<T>() Initializes an Abstractions implementation. Declaration public static void Init<T>() where T : IBootstrap Type Parameters Name Description T An implementation of . Restart() Restarts the Pi. Must be running as SU. Declaration public static ProcessResult Restart() Returns Type Description ProcessResult The process result. RestartAsync() Restarts the Pi. Must be running as SU. Declaration public static Task<ProcessResult> RestartAsync() Returns Type Description Task < ProcessResult > The process result. Shutdown() Halts the Pi. Must be running as SU. Declaration public static ProcessResult Shutdown() Returns Type Description ProcessResult The process result. ShutdownAsync() Halts the Pi. Must be running as SU. Declaration public static Task<ProcessResult> ShutdownAsync() Returns Type Description Task < ProcessResult > The process result. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Native.html": {
    "href": "api/Unosquare.RaspberryIO.Native.html",
    "title": "Namespace Unosquare.RaspberryIO.Native | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Namespace Unosquare.RaspberryIO.Native Structs SystemName OS uname structure. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Computer.WirelessNetworkInfo.html": {
    "href": "api/Unosquare.RaspberryIO.Computer.WirelessNetworkInfo.html",
    "title": "Class WirelessNetworkInfo | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Class WirelessNetworkInfo Represents a wireless network information. Inheritance Object WirelessNetworkInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.RaspberryIO.Computer Syntax public class WirelessNetworkInfo Properties IsEncrypted Gets a value indicating whether this instance is encrypted. Declaration public bool IsEncrypted { get; } Property Value Type Description Boolean Name Gets the ESSID of the Wireless network. Declaration public string Name { get; } Property Value Type Description String Quality Gets the network quality. Declaration public string Quality { get; } Property Value Type Description String Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Computer.SystemInfo.html": {
    "href": "api/Unosquare.RaspberryIO.Computer.SystemInfo.html",
    "title": "Class SystemInfo | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Class SystemInfo Retrieves the RaspberryPI System Information. http://raspberry-pi-guide.readthedocs.io/en/latest/system.html . Inheritance Object SystemInfo Namespace : Unosquare.RaspberryIO.Computer Syntax public sealed class SystemInfo : SingletonBase<SystemInfo> Properties BoardModel Gets the board model (accordingly to new-style revision codes). Declaration public BoardModel BoardModel { get; } Property Value Type Description BoardModel Exceptions Type Condition InvalidOperationException This board does not support new-style revision codes. Use {nameof(RaspberryPiVersion)} BoardRevision Gets the board revision (1 or 2). Declaration public int BoardRevision { get; set; } Property Value Type Description Int32 The wiring pi board revision. CpuArchitecture Gets the CPU architecture code. Declaration public string CpuArchitecture { get; } Property Value Type Description String CpuImplementer Gets the CPU implementer hex code. Declaration public string CpuImplementer { get; } Property Value Type Description String CpuPart Gets the CPU part code. Declaration public string CpuPart { get; } Property Value Type Description String CpuRevision Gets the CPU revision code. Declaration public string CpuRevision { get; } Property Value Type Description String CpuVariant Gets the CPU variant code. Declaration public string CpuVariant { get; } Property Value Type Description String Features Gets a list of supported CPU features. Declaration public string[] Features { get; } Property Value Type Description String [] Hardware Gets the hardware model number. Declaration public string Hardware { get; } Property Value Type Description String InstalledRam Gets the installed ram in bytes. Declaration public int InstalledRam { get; } Property Value Type Description Int32 IsLittleEndian Gets a value indicating whether this CPU is little endian. Declaration public bool IsLittleEndian { get; } Property Value Type Description Boolean LibraryVersion Gets the library version. Declaration public Version LibraryVersion { get; } Property Value Type Description Version Manufacturer Gets the manufacturer of the board (accordingly to new-style revision codes). Declaration public Manufacturer Manufacturer { get; } Property Value Type Description Manufacturer Exceptions Type Condition InvalidOperationException This board does not support new-style revision codes. Use {nameof(RaspberryPiVersion)} MemorySize Gets the size of the memory (accordingly to new-style revision codes). Declaration public MemorySize MemorySize { get; } Property Value Type Description MemorySize Exceptions Type Condition InvalidOperationException This board does not support new-style revision codes. Use {nameof(RaspberryPiVersion)} ModelName Gets the CPU model name. Declaration public string ModelName { get; } Property Value Type Description String OperatingSystem Gets the OS information. Declaration public OsInfo OperatingSystem { get; set; } Property Value Type Description OsInfo The os information. ProcessorCount Gets the number of processor cores. Declaration public int ProcessorCount { get; } Property Value Type Description Int32 ProcessorModel Gets processor model (accordingly to new-style revision codes). Declaration public ProcessorModel ProcessorModel { get; } Property Value Type Description ProcessorModel Exceptions Type Condition InvalidOperationException This board does not support new-style revision codes. Use {nameof(RaspberryPiVersion)} RaspberryPiVersion Gets the Raspberry Pi version. Declaration public PiVersion RaspberryPiVersion { get; set; } Property Value Type Description PiVersion Revision Gets the hardware revision number. Declaration public string Revision { get; } Property Value Type Description String RevisionNumber Gets the revision number (accordingly to new-style revision codes). Declaration public int RevisionNumber { get; set; } Property Value Type Description Int32 Serial Gets the serial number. Declaration public string Serial { get; } Property Value Type Description String Uptime Gets the system up-time (in seconds). Declaration public double Uptime { get; } Property Value Type Description Double UptimeTimeSpan Gets the uptime in TimeSpan. Declaration public TimeSpan UptimeTimeSpan { get; } Property Value Type Description TimeSpan Methods ToString() Returns a String that represents this instance. Declaration public override string ToString() Returns Type Description String A String that represents this instance. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Camera.CameraStillSettings.html": {
    "href": "api/Unosquare.RaspberryIO.Camera.CameraStillSettings.html",
    "title": "Class CameraStillSettings | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Class CameraStillSettings Defines a wrapper for the raspistill program and its settings (command-line arguments). Inheritance Object CameraSettingsBase CameraStillSettings Inherited Members CameraSettingsBase.Ci CameraSettingsBase.CaptureTimeoutMilliseconds CameraSettingsBase.CaptureDisplayPreview CameraSettingsBase.CaptureDisplayPreviewInFullScreen CameraSettingsBase.CaptureVideoStabilizationEnabled CameraSettingsBase.CaptureDisplayPreviewOpacity CameraSettingsBase.CaptureSensorRoi CameraSettingsBase.CaptureShutterSpeedMicroseconds CameraSettingsBase.CaptureExposure CameraSettingsBase.CaptureExposureCompensation CameraSettingsBase.CaptureMeteringMode CameraSettingsBase.CaptureWhiteBalanceControl CameraSettingsBase.CaptureWhiteBalanceGainBlue CameraSettingsBase.CaptureWhiteBalanceGainRed CameraSettingsBase.CaptureDynamicRangeCompensation CameraSettingsBase.CaptureWidth CameraSettingsBase.CaptureHeight CameraSettingsBase.ImageSharpness CameraSettingsBase.ImageContrast CameraSettingsBase.ImageBrightness CameraSettingsBase.ImageSaturation CameraSettingsBase.ImageIso CameraSettingsBase.ImageEffect CameraSettingsBase.ImageColorEffectU CameraSettingsBase.ImageColorEffectV CameraSettingsBase.ImageRotation CameraSettingsBase.ImageFlipHorizontally CameraSettingsBase.ImageFlipVertically CameraSettingsBase.ImageAnnotations CameraSettingsBase.ImageAnnotationsText CameraSettingsBase.ImageAnnotationFontSize CameraSettingsBase.ImageAnnotationFontColor CameraSettingsBase.ImageAnnotationBackground Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.RaspberryIO.Camera Syntax public class CameraStillSettings : CameraSettingsBase Properties CaptureDisplayPreviewAtResolution Gets or sets a value indicating whether the preview window (if enabled) uses native capture resolution This may slow down preview FPS. Declaration public bool CaptureDisplayPreviewAtResolution { get; set; } Property Value Type Description Boolean CaptureEncoding Gets or sets the encoding format the hardware will use for the output. Declaration public CameraImageEncodingFormat CaptureEncoding { get; set; } Property Value Type Description CameraImageEncodingFormat CaptureJpegExtendedInfo JPEG EXIF data Keys and values must be already properly escaped. Otherwise the command will fail. Declaration public Dictionary<string, string> CaptureJpegExtendedInfo { get; } Property Value Type Description Dictionary < String , String > CaptureJpegIncludeRawBayerMetadata Gets or sets a value indicating whether the JPEG encoder should add raw bayer metadata. Declaration public bool CaptureJpegIncludeRawBayerMetadata { get; set; } Property Value Type Description Boolean CaptureJpegQuality Gets or sets the quality for JPEG only encoding mode. Value ranges from 0 to 100. Declaration public int CaptureJpegQuality { get; set; } Property Value Type Description Int32 CommandName Gets the command file executable. Declaration public override string CommandName { get; } Property Value Type Description String Overrides CameraSettingsBase.CommandName HorizontalFlip Gets or sets a value indicating whether [horizontal flip]. Declaration public bool HorizontalFlip { get; set; } Property Value Type Description Boolean true if [horizontal flip]; otherwise, false . Rotation Gets or sets the rotation. Declaration public int Rotation { get; set; } Property Value Type Description Int32 Exceptions Type Condition ArgumentOutOfRangeException Valid range 0-359. VerticalFlip Gets or sets a value indicating whether [vertical flip]. Declaration public bool VerticalFlip { get; set; } Property Value Type Description Boolean true if [vertical flip]; otherwise, false . Methods CreateProcessArguments() Creates the process arguments. Declaration public override string CreateProcessArguments() Returns Type Description String The string that represents the process arguments. Overrides CameraSettingsBase.CreateProcessArguments() See Also CameraSettingsBase Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Camera.CameraSettingsBase.html": {
    "href": "api/Unosquare.RaspberryIO.Camera.CameraSettingsBase.html",
    "title": "Class CameraSettingsBase | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Class CameraSettingsBase A base class to implement raspistill and raspivid wrappers Full documentation available at https://www.raspberrypi.org/documentation/raspbian/applications/camera.md . Inheritance Object CameraSettingsBase CameraStillSettings CameraVideoSettings Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.RaspberryIO.Camera Syntax public abstract class CameraSettingsBase Fields Ci The Invariant Culture shorthand. Declaration protected static readonly CultureInfo Ci Field Value Type Description CultureInfo Properties CaptureDisplayPreview Gets or sets a value indicating whether or not to show a preview window on the screen. Declaration public bool CaptureDisplayPreview { get; set; } Property Value Type Description Boolean CaptureDisplayPreviewInFullScreen Gets or sets a value indicating whether a preview window is shown in full screen mode if enabled. Declaration public bool CaptureDisplayPreviewInFullScreen { get; set; } Property Value Type Description Boolean CaptureDisplayPreviewOpacity Gets or sets the display preview opacity only if the display preview property is enabled. Declaration public byte CaptureDisplayPreviewOpacity { get; set; } Property Value Type Description Byte CaptureDynamicRangeCompensation Gets or sets the dynamic range compensation. DRC changes the images by increasing the range of dark areas, and decreasing the brighter areas. This can improve the image in low light areas. Declaration public CameraDynamicRangeCompensation CaptureDynamicRangeCompensation { get; set; } Property Value Type Description CameraDynamicRangeCompensation CaptureExposure Gets or sets the exposure mode. Declaration public CameraExposureMode CaptureExposure { get; set; } Property Value Type Description CameraExposureMode CaptureExposureCompensation Gets or sets the picture EV compensation. Default is 0, Range is -10 to 10 Camera exposure compensation is commonly stated in terms of EV units; 1 EV is equal to one exposure step (or stop), corresponding to a doubling of exposure. Exposure can be adjusted by changing either the lens f-number or the exposure time; which one is changed usually depends on the camera's exposure mode. Declaration public int CaptureExposureCompensation { get; set; } Property Value Type Description Int32 CaptureHeight Gets or sets the height of the picture to take. Less than or equal to 0 in either width or height means maximum resolution available. Declaration public int CaptureHeight { get; set; } Property Value Type Description Int32 CaptureMeteringMode Gets or sets the capture metering mode. Declaration public CameraMeteringMode CaptureMeteringMode { get; set; } Property Value Type Description CameraMeteringMode CaptureSensorRoi Gets or sets the capture sensor region of interest in relative coordinates. Declaration public CameraRect CaptureSensorRoi { get; set; } Property Value Type Description CameraRect CaptureShutterSpeedMicroseconds Gets or sets the capture shutter speed in microseconds. Default -1, Range 0 to 6000000 (equivalent to 6 seconds). Declaration public int CaptureShutterSpeedMicroseconds { get; set; } Property Value Type Description Int32 CaptureTimeoutMilliseconds Gets or sets the timeout milliseconds. Default value is 5000 Recommended value is at least 300 in order to let the light collectors open. Declaration public int CaptureTimeoutMilliseconds { get; set; } Property Value Type Description Int32 CaptureVideoStabilizationEnabled Gets or sets a value indicating whether video stabilization should be enabled. Declaration public bool CaptureVideoStabilizationEnabled { get; set; } Property Value Type Description Boolean CaptureWhiteBalanceControl Gets or sets the automatic white balance mode. By default it is set to Auto. Declaration public CameraWhiteBalanceMode CaptureWhiteBalanceControl { get; set; } Property Value Type Description CameraWhiteBalanceMode CaptureWhiteBalanceGainBlue Gets or sets the capture white balance gain on the blue channel. Example: 1.25 Only takes effect if White balance control is set to off. Default is 0. Declaration public decimal CaptureWhiteBalanceGainBlue { get; set; } Property Value Type Description Decimal CaptureWhiteBalanceGainRed Gets or sets the capture white balance gain on the red channel. Example: 1.75 Only takes effect if White balance control is set to off. Default is 0. Declaration public decimal CaptureWhiteBalanceGainRed { get; set; } Property Value Type Description Decimal CaptureWidth Gets or sets the width of the picture to take. Less than or equal to 0 in either width or height means maximum resolution available. Declaration public int CaptureWidth { get; set; } Property Value Type Description Int32 CommandName Gets the command file executable. Declaration public abstract string CommandName { get; } Property Value Type Description String ImageAnnotationBackground Gets or sets the background color for text annotations. Declaration public CameraColor ImageAnnotationBackground { get; set; } Property Value Type Description CameraColor The image annotation background. ImageAnnotationFontColor Gets or sets the color of the text annotations. Declaration public CameraColor ImageAnnotationFontColor { get; set; } Property Value Type Description CameraColor The color of the image annotation font. ImageAnnotationFontSize Gets or sets the font size of the text annotations Default is -1, range is 6 to 160. Declaration public int ImageAnnotationFontSize { get; set; } Property Value Type Description Int32 ImageAnnotations Gets or sets the image annotations using a bitmask (or flags) notation. Apply a bitwise OR to the enumeration to include multiple annotations. Declaration public CameraAnnotation ImageAnnotations { get; set; } Property Value Type Description CameraAnnotation ImageAnnotationsText Gets or sets the image annotations text. Text may include date/time placeholders by using the '%' character, as used by strftime. Example: ABC %Y-%m-%d %X will output ABC 2015-10-28 20:09:33. Declaration public string ImageAnnotationsText { get; set; } Property Value Type Description String ImageBrightness Gets or sets the picture brightness. Default is 50, Range form 0 to 100. Declaration public int ImageBrightness { get; set; } Property Value Type Description Int32 ImageColorEffectU Gets or sets the color effect U coordinates. Default is -1, Range is 0 to 255 128:128 should be effectively a monochrome image. Declaration public int ImageColorEffectU { get; set; } Property Value Type Description Int32 ImageColorEffectV Gets or sets the color effect V coordinates. Default is -1, Range is 0 to 255 128:128 should be effectively a monochrome image. Declaration public int ImageColorEffectV { get; set; } Property Value Type Description Int32 ImageContrast Gets or sets the picture contrast. Default is 0, Range form -100 to 100. Declaration public int ImageContrast { get; set; } Property Value Type Description Int32 ImageEffect Gets or sets the image capture effect to be applied. Declaration public CameraImageEffect ImageEffect { get; set; } Property Value Type Description CameraImageEffect ImageFlipHorizontally Gets or sets a value indicating whether the image should be flipped horizontally. Declaration public bool ImageFlipHorizontally { get; set; } Property Value Type Description Boolean ImageFlipVertically Gets or sets a value indicating whether the image should be flipped vertically. Declaration public bool ImageFlipVertically { get; set; } Property Value Type Description Boolean ImageIso Gets or sets the picture ISO. Default is -1 Range is 100 to 800 The higher the value, the more light the sensor absorbs. Declaration public int ImageIso { get; set; } Property Value Type Description Int32 ImageRotation Gets or sets the image rotation. Default is no rotation. Declaration public CameraImageRotation ImageRotation { get; set; } Property Value Type Description CameraImageRotation ImageSaturation Gets or sets the picture saturation. Default is 0, Range form -100 to 100. Declaration public int ImageSaturation { get; set; } Property Value Type Description Int32 ImageSharpness Gets or sets the picture sharpness. Default is 0, Range form -100 to 100. Declaration public int ImageSharpness { get; set; } Property Value Type Description Int32 Methods CreateProcessArguments() Creates the process arguments. Declaration public virtual string CreateProcessArguments() Returns Type Description String The string that represents the process arguments. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Camera.CameraMeteringMode.html": {
    "href": "api/Unosquare.RaspberryIO.Camera.CameraMeteringMode.html",
    "title": "Enum CameraMeteringMode | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Enum CameraMeteringMode Defines the different metering modes for the Raspberry Pi's camera module. Namespace : Unosquare.RaspberryIO.Camera Syntax public enum CameraMeteringMode Fields Name Description Average The average Backlit The backlit Matrix The matrix Spot The spot Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Camera.CameraImageEncodingFormat.html": {
    "href": "api/Unosquare.RaspberryIO.Camera.CameraImageEncodingFormat.html",
    "title": "Enum CameraImageEncodingFormat | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Enum CameraImageEncodingFormat Defines the available encoding formats for the Raspberry Pi camera module. Namespace : Unosquare.RaspberryIO.Camera Syntax public enum CameraImageEncodingFormat Fields Name Description Bmp The BMP Gif The GIF Jpg The JPG Png The PNG Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Camera.CameraH264Profile.html": {
    "href": "api/Unosquare.RaspberryIO.Camera.CameraH264Profile.html",
    "title": "Enum CameraH264Profile | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Enum CameraH264Profile Defines the different H.264 encoding profiles to be used when capturing video. Namespace : Unosquare.RaspberryIO.Camera Syntax public enum CameraH264Profile Fields Name Description Baseline BP: Primarily for lower-cost applications with limited computing resources, this profile is used widely in videoconferencing and mobile applications. High HiP: The primary profile for broadcast and disc storage applications, particularly for high-definition television applications (this is the profile adopted into HD DVD and Blu-ray Disc, for example). Main MP: Originally intended as the mainstream consumer profile for broadcast and storage applications, the importance of this profile faded when the High profile was developed for those applications. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Camera.CameraDynamicRangeCompensation.html": {
    "href": "api/Unosquare.RaspberryIO.Camera.CameraDynamicRangeCompensation.html",
    "title": "Enum CameraDynamicRangeCompensation | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Enum CameraDynamicRangeCompensation Defines the different DRC (Dynamic Range Compensation) modes for the Raspberry Pi's camera module Helpful for low light photos. Namespace : Unosquare.RaspberryIO.Camera Syntax public enum CameraDynamicRangeCompensation Fields Name Description High The high Low The low Medium The medium Off The off setting Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Computer.OsInfo.html": {
    "href": "api/Unosquare.RaspberryIO.Computer.OsInfo.html",
    "title": "Class OsInfo | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Class OsInfo Represents the OS Information. Inheritance Object OsInfo Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.RaspberryIO.Computer Syntax public class OsInfo Properties DomainName Domain name. Declaration public string DomainName { get; set; } Property Value Type Description String Machine Hardware level. Declaration public string Machine { get; set; } Property Value Type Description String NodeName Node name. Declaration public string NodeName { get; set; } Property Value Type Description String Release Release level. Declaration public string Release { get; set; } Property Value Type Description String SysName System name. Declaration public string SysName { get; set; } Property Value Type Description String Version Version level. Declaration public string Version { get; set; } Property Value Type Description String Methods ToString() Returns a String that represents this instance. Declaration public override string ToString() Returns Type Description String A String that represents this instance. Overrides Object.ToString() Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Computer.NetworkSettings.html": {
    "href": "api/Unosquare.RaspberryIO.Computer.NetworkSettings.html",
    "title": "Class NetworkSettings | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Class NetworkSettings Represents the network information. Inheritance Object NetworkSettings Namespace : Unosquare.RaspberryIO.Computer Syntax public class NetworkSettings : SingletonBase<NetworkSettings> Properties HostName Gets the local machine Host Name. Declaration public string HostName { get; } Property Value Type Description String Methods GetWirelessNetworkName() Retrieves current wireless connected network name. Declaration public Task<string> GetWirelessNetworkName() Returns Type Description Task < String > The connected network name. RetrieveAdapters() Retrieves the network adapters. Declaration public Task<List<NetworkAdapterInfo>> RetrieveAdapters() Returns Type Description Task < List < NetworkAdapterInfo >> A list of network adapters. RetrieveWirelessNetworks(String) Retrieves the wireless networks. Declaration public Task<List<WirelessNetworkInfo>> RetrieveWirelessNetworks(string adapter) Parameters Type Name Description String adapter The adapter. Returns Type Description Task < List < WirelessNetworkInfo >> A list of WiFi networks. RetrieveWirelessNetworks(String[]) Retrieves the wireless networks. Declaration public Task<List<WirelessNetworkInfo>> RetrieveWirelessNetworks(string[] adapters = null) Parameters Type Name Description String [] adapters The adapters. Returns Type Description Task < List < WirelessNetworkInfo >> A list of WiFi networks. SetupWirelessNetwork(String, String, String, String) Setups the wireless network. Declaration public Task<bool> SetupWirelessNetwork(string adapterName, string networkSsid, string password = null, string countryCode = \"US\") Parameters Type Name Description String adapterName Name of the adapter. String networkSsid The network ssid. String password The password. String countryCode The 2-letter country code in uppercase. Default is US. Returns Type Description Task < Boolean > True if successful. Otherwise, false. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.RaspberryIO.Camera.CameraVideoSettings.html": {
    "href": "api/Unosquare.RaspberryIO.Camera.CameraVideoSettings.html",
    "title": "Class CameraVideoSettings | RaspberryIO - Pi's hardware access from Mono",
    "keywords": "Class CameraVideoSettings Represents the raspivid camera settings for video capture functionality. Inheritance Object CameraSettingsBase CameraVideoSettings Inherited Members CameraSettingsBase.Ci CameraSettingsBase.CaptureTimeoutMilliseconds CameraSettingsBase.CaptureDisplayPreview CameraSettingsBase.CaptureDisplayPreviewInFullScreen CameraSettingsBase.CaptureVideoStabilizationEnabled CameraSettingsBase.CaptureDisplayPreviewOpacity CameraSettingsBase.CaptureSensorRoi CameraSettingsBase.CaptureShutterSpeedMicroseconds CameraSettingsBase.CaptureExposure CameraSettingsBase.CaptureExposureCompensation CameraSettingsBase.CaptureMeteringMode CameraSettingsBase.CaptureWhiteBalanceControl CameraSettingsBase.CaptureWhiteBalanceGainBlue CameraSettingsBase.CaptureWhiteBalanceGainRed CameraSettingsBase.CaptureDynamicRangeCompensation CameraSettingsBase.CaptureWidth CameraSettingsBase.CaptureHeight CameraSettingsBase.ImageSharpness CameraSettingsBase.ImageContrast CameraSettingsBase.ImageBrightness CameraSettingsBase.ImageSaturation CameraSettingsBase.ImageIso CameraSettingsBase.ImageEffect CameraSettingsBase.ImageColorEffectU CameraSettingsBase.ImageColorEffectV CameraSettingsBase.ImageRotation CameraSettingsBase.ImageFlipHorizontally CameraSettingsBase.ImageFlipVertically CameraSettingsBase.ImageAnnotations CameraSettingsBase.ImageAnnotationsText CameraSettingsBase.ImageAnnotationFontSize CameraSettingsBase.ImageAnnotationFontColor CameraSettingsBase.ImageAnnotationBackground Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.RaspberryIO.Camera Syntax public class CameraVideoSettings : CameraSettingsBase Properties CaptureBitrate Use bits per second, so 10Mbits/s would be -b 10000000. For H264, 1080p30 a high quality bitrate would be 15Mbits/s or more. Maximum bitrate is 25Mbits/s (-b 25000000), but much over 17Mbits/s won't show noticeable improvement at 1080p30. Default -1. Declaration public int CaptureBitrate { get; set; } Property Value Type Description Int32 CaptureDisplayPreviewEncoded Switch on an option to display the preview after compression. This will show any compression artefacts in the preview window. In normal operation, the preview will show the camera output prior to being compressed. This option is not guaranteed to work in future releases. Declaration public bool CaptureDisplayPreviewEncoded { get; set; } Property Value Type Description Boolean true if [capture display preview encoded]; otherwise, false . CaptureFramerate Gets or sets the framerate. Default 25, range 2 to 30. Declaration public int CaptureFramerate { get; set; } Property Value Type Description Int32 CaptureInterleaveHeaders Forces the stream to include PPS and SPS headers on every I-frame. Needed for certain streaming cases e.g. Apple HLS. These headers are small, so don't greatly increase the file size. Declaration public bool CaptureInterleaveHeaders { get; set; } Property Value Type Description Boolean true if [interleave headers]; otherwise, false . CaptureKeyframeRate Sets the intra refresh period (GoP) rate for the recorded video. H264 video uses a complete frame (I-frame) every intra refresh period, from which subsequent frames are based. This option specifies the number of frames between each I-frame. Larger numbers here will reduce the size of the resulting video, and smaller numbers make the stream less error-prone. Declaration public int CaptureKeyframeRate { get; set; } Property Value Type Description Int32 CaptureProfile Gets or sets the profile. Sets the H264 profile to be used for the encoding. Default is Main mode. Declaration public CameraH264Profile CaptureProfile { get; set; } Property Value Type Description CameraH264Profile CaptureQuantisation Sets the initial quantisation parameter for the stream. Varies from approximately 10 to 40, and will greatly affect the quality of the recording. Higher values reduce quality and decrease file size. Combine this setting with a bitrate of 0 to set a completely variable bitrate. Declaration public int CaptureQuantisation { get; set; } Property Value Type Description Int32 CommandName Gets the command file executable. Declaration public override string CommandName { get; } Property Value Type Description String Overrides CameraSettingsBase.CommandName Fullscreen Toggle fullscreen mode for video preview. Declaration public bool Fullscreen { get; set; } Property Value Type Description Boolean LengthInSeconds Video stream length in seconds Declaration public int LengthInSeconds { get; set; } Property Value Type Description Int32 VideoFileName Specifies the path to save video files. Declaration public string VideoFileName { get; set; } Property Value Type Description String Methods CreateProcessArguments() Creates the process arguments. Declaration public override string CreateProcessArguments() Returns Type Description String The string that represents the process arguments. Overrides CameraSettingsBase.CreateProcessArguments() See Also CameraSettingsBase Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  }
}